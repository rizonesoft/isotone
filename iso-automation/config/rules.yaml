# Isotone Automation Rules
# Central configuration for all automation and LLM instructions
# Generated from MD documentation files

llm_instructions:
  branding:
    priority: 100
    enabled: true
    context: ["*"]
    description: "Critical branding rules"
    rules:
      - "ALWAYS write 'Isotone' not 'Isotone CMS'"
      - "The rebrand happened in v0.1.5-alpha"
      - "This applies to ALL documentation, code, and UI"
    violations:
      - pattern: "Isotone CMS"
        severity: "critical"
        message: "Use 'Isotone' not 'Isotone CMS'"

  search_before_create:
    priority: 95
    enabled: true
    context: ["development"]
    description: "Search for existing code before creating new"
    workflow:
      - "Use Grep to search for similar functionality"
      - "Use Glob to find related files"
      - "Check /iso-includes/css/ for existing styles"
      - "Review similar pages/components"
    rules:
      - "REUSE over CREATE"
      - "Never duplicate existing code"
      - "Always extend existing components"

  database_connection:
    priority: 85
    enabled: true
    context: ["database", "setup", "configuration"]
    description: "Database connection configuration and troubleshooting"
    connection_settings:
      web_context:
        host: "127.0.0.1 (converted from localhost)"
        port: 3306
        database: "isotone_db"
        username: "root"
        password: "empty"
      wsl_cli_context:
        host: "Windows host IP (auto-detected)"
        port: 3306
        database: "isotone_db"
        username: "root"
        password: "empty"
    ide_configuration:
      common_settings:
        host: "localhost or 127.0.0.1"
        port: 3306
        database: "isotone_db"
        username: "root"
        password: "empty"
      tools:
        phpstorm: "jdbc:mysql://localhost:3306/isotone_db"
        vscode: "MySQL extension by Jun Han"
        dbeaver: "MySQL connection type"
        workbench: "Default Schema: isotone_db"
        tableplus: "MySQL connection"
        heidisql: "Comes with XAMPP"
    command_line:
      windows_xampp: "C:\\xampp\\mysql\\bin\\mysql -u root isotone_db"
      wsl: "mysql -h 127.0.0.1 -u root isotone_db"
    redbean_orm:
      features:
        - "Creates tables automatically"
        - "No migrations required for development"
        - "Lowercase singular table names"
        - "Convention: isotoneuser, isotonesetting (no underscores)"
      table_structure:
        isotonesetting:
          - "setting_key: Configuration key"
          - "setting_value: Configuration value"
          - "setting_type: Data type"
          - "updated_at: Last update"
        isotoneuser:
          - "username: Login name"
          - "email: User email"
          - "password: Hashed password"
          - "role: User role"
          - "status: Account status"
          - "created_at: Creation timestamp"
          - "updated_at: Last update"
      best_practices:
        - "Development: freeze = false (auto-modify tables)"
        - "Production: freeze = true (lock schema)"
        - "Regular backups via phpMyAdmin"
        - "Use RedBean conventions for naming"
    troubleshooting:
      ide_connection:
        - "Verify XAMPP MySQL is running"
        - "Try 127.0.0.1 instead of localhost"
        - "Check Windows Firewall port 3306"
        - "Verify MySQL bind-address in my.ini"
      app_connection:
        - "Check http://localhost/isotone/"
        - "Verify isotone_db exists in phpMyAdmin"
        - "Ensure config.php exists (not config.sample.php)"
        - "Run installation wizard if needed"
      wsl_cli:
        - "Expected to auto-detect Windows IP"
        - "Use phpMyAdmin for management"
        - "Application handles WSL detection"
    quick_reference:
      web_app: "127.0.0.1:3306/isotone_db"
      wsl_cli: "Auto-detected Windows IP"
      ide_tools: "localhost:3306/isotone_db"
      phpmyadmin: "http://localhost/phpmyadmin"
    important_notes:
      - "Config is in config.php, NOT .env files"
      - "Smart detection only affects PHP application"
      - "IDEs connect directly to MySQL"
      - "External tools bypass PHP layer"
  
  database_operations:
    priority: 90
    enabled: true
    context: ["development"]
    description: "Database operation rules"
    rules:
      - "ALWAYS use RedBeanPHP for database operations"
      - "NEVER use PDO or mysqli directly"
      - "Table names: lowercase, no underscores"
      - "Column names: can use underscores"
    violations:
      - pattern: 'new PDO\('
        severity: "critical"
        message: "Use RedBeanPHP instead of PDO"
      - pattern: 'new mysqli\('
        severity: "critical"
        message: "Use RedBeanPHP instead of mysqli"

  version_management:
    priority: 85
    enabled: true
    context: ["version", "release", "bump", "ship"]
    description: "Comprehensive version management system"
    intent_mapping:
      bug_fixes:
        triggers: ["fix that bug", "fixed the", "bug fix", "patch"]
        action: "php isotone version:bump patch"
        type: "patch"
      new_features:
        triggers: ["added", "new feature", "implemented", "created"]
        action: "php isotone version:bump minor"
        type: "minor"
      breaking_changes:
        triggers: ["breaking change", "api changed", "major update", "incompatible"]
        action: "php isotone version:bump major"
        type: "major"
      beta_release:
        triggers: ["ready for beta", "beta testing", "go to beta"]
        action: "php isotone version:bump minor beta"
        type: "minor"
        stage: "beta"
      production_release:
        triggers: ["ship it", "release 1.0", "production", "go live"]
        action: "php isotone version:bump major stable"
        type: "major"
        stage: "stable"
    stage_progression:
      alpha:
        next: "beta"
        when: "Core features complete"
      beta:
        next: "rc"
        when: "Testing mostly done"
      rc:
        next: "stable"
        when: "Ready for production"
      stable:
        next: "alpha"
        when: "Starting next major version"
    codenames:
      suggested_progression:
        - "v0.x: Genesis (beginning)"
        - "v1.0: Phoenix (rebirth/launch)"
        - "v2.0: Aurora (dawn/light)"
        - "v3.0: Titan (strength)"
        - "v4.0: Nebula (expansion)"
        - "v5.0: Olympus (peak)"
        - "v6.0: Cosmos (universe)"
        - "v7.0: Chronos (time)"
        - "v8.0: Atlas (support)"
        - "v9.0: Helios (sun)"
        - "v10.0: Zenith (pinnacle)"
    mandatory_workflow:
      - step: "Determine version type (patch/minor/major)"
        command: "Analyze changes to determine type"
      - step: "Execute version bump"
        command: "php isotone version:bump [type] [stage] [codename]"
      - step: "Generate changelog (MANDATORY)"
        command: "php isotone changelog"
      - step: "Update all documentation (MANDATORY)"
        command: "composer docs:all"
      - step: "Verify everything updated"
        commands:
          - "cat config/version.json | head -5"
          - "cat CHANGELOG.md | head -30"
          - "echo '✅ Version bump complete!'"
    decision_tree: |
      User mentions version?
      ├─ Specific version? → Use version:set
      ├─ What changed?
      │  ├─ Bug fix → version:bump patch
      │  ├─ New feature → version:bump minor
      │  ├─ Breaking change → version:bump major
      │  └─ Unclear → Ask user
      ├─ Stage mentioned?
      │  ├─ beta → Add beta stage
      │  ├─ RC → Add rc stage
      │  ├─ release → stable (no stage)
      │  └─ No → Keep current stage
      └─ Major version? → Suggest new codename
    ui_updates:
      automatic: true
      description: "UI automatically pulls from config/version.json"
      locations:
        - "Landing page: Version::format()"
        - "API: /api/version endpoint"
        - "CLI: php isotone version"
        - "Badge: Version::getBadge()"
    rules:
      - "NEVER bump version without running ALL steps"
      - "NEVER skip changelog generation (step 3)"
      - "NEVER skip documentation update (step 4)"
      - "Always follow SemVer: Major.Minor.Patch"
      - "Stage progression: alpha → beta → rc → stable"
      - "Version.json is single source of truth"
      - "UI updates automatically - no code changes needed"
      - "Don't manually edit version strings in code"
      - "Don't skip version numbers"

  auto_commit:
    priority: 80
    enabled: true
    context: ["development"]
    description: "Auto-commit on satisfaction triggers"
    strong_satisfaction_triggers:
      - "perfect"
      - "that's perfect"
      - "perfect thanks"
      - "excellent"
      - "excellent work"
      - "that's exactly what I wanted"
      - "great work"
      - "great job"
      - "this looks good"
      - "looks good"
      - "ship it"
      - "ready to ship"
      - "ready to commit"
      - "commit this"
      - "let's push this"
      - "push it"
      - "happy with this"
      - "happy with that"
      - "working perfectly"
      - "fantastic implementation"
      - "well done"
      - "good job"
      - "awesome"
      - "amazing"
      - "love it"
      - "i love this"
    completion_signals:
      - "feature is complete"
      - "implementation finished"
      - "that completes"
      - "we're done with"
      - "is working"
      - "solves the problem"
      - "working as expected"
    moderate_satisfaction_triggers:
      - "this is better"
      - "good improvement"
      - "much better now"
      - "that's an improvement"
      - "getting closer"
    do_not_commit_on:
      - "can you fix"
      - "this doesn't work"
      - "try again"
      - "almost there"
      - "bug"
      - "error"
      - "issue"
      - "problem"
    workflow:
      - "Detect satisfaction signal in user message"
      - "Verify work is complete (not WIP)"
      - "Generate semantic commit message"
      - "Execute: git add -A"
      - "Execute: git commit -m 'type: description'"
      - "Execute: git push"
      - "Inform user of commit and push"
    commit_response_template: |
      Excellent! I've committed and pushed your changes:
      
      📝 Commit: {commit_type}: {description}
      🚀 Pushed to: origin/main
      📊 Files changed: {file_count} files, {insertions} insertions
      
      Your implementation is now live in the repository!

  configuration:
    priority: 75
    enabled: true
    context: ["setup", "configuration", "install"]
    description: "Configuration system rules and setup"
    critical_note: "⚠️ Isotone uses config.php NOT .env files - This is by design for shared hosting compatibility"
    setup_workflow:
      - "Copy config.sample.php to config.php"
      - "Edit database credentials"
      - "Set security keys (generate from WordPress salt generator)"
      - "Configure environment (development/staging/production)"
      - "Set file permissions (chmod 600 config.php)"
    required_settings:
      database:
        DB_HOST: "Database hostname (usually localhost)"
        DB_NAME: "Database name"
        DB_USER: "Database username"
        DB_PASSWORD: "Database password"
        DB_PORT: "Database port (default: 3306)"
        DB_CHARSET: "Character set (default: utf8mb4)"
        DB_COLLATE: "Collation (default: utf8mb4_unicode_ci)"
        DB_PREFIX: "Table prefix (default: iso_)"
      application:
        SITE_URL: "Site URL (leave empty for auto-detection)"
        ADMIN_EMAIL: "Administrator email"
        TIMEZONE: "Default timezone (e.g., UTC)"
        LANGUAGE: "Default language code (e.g., en)"
      security:
        AUTH_KEY: "Authentication key for cookies"
        SECURE_AUTH_KEY: "Secure authentication key"
        LOGGED_IN_KEY: "Key for logged-in cookies"
        NONCE_KEY: "Nonce generation key"
        AUTH_SALT: "Authentication salt"
        SECURE_AUTH_SALT: "Secure authentication salt"
        LOGGED_IN_SALT: "Logged-in cookie salt"
        NONCE_SALT: "Nonce salt"
      developer:
        DEBUG_MODE: "Enable debug mode (true/false)"
        DEBUG_QUERIES: "Log database queries (true/false)"
        DISPLAY_ERRORS: "Show PHP errors (true/false)"
        ERROR_LEVEL: "PHP error reporting level"
        MAINTENANCE_MODE: "Enable maintenance mode (true/false)"
        ENVIRONMENT: "Current environment (development/staging/production)"
      cache:
        CACHE_DRIVER: "Cache driver (file/redis/memcached)"
        CACHE_PATH: "Path for file cache storage"
        CACHE_TTL: "Default cache TTL in seconds"
      session:
        SESSION_DRIVER: "Session storage driver (file/database)"
        SESSION_LIFETIME: "Session lifetime in minutes (default: 120)"
        SESSION_PATH: "Path for file sessions"
        SESSION_SECURE: "Require HTTPS for cookies (true/false)"
      logging:
        LOG_CHANNEL: "Log channel (single/daily/syslog)"
        LOG_LEVEL: "Minimum log level (debug/info/warning/error)"
        LOG_PATH: "Path to log files"
        LOG_DAYS: "Days to keep log files (for daily channel)"
      mail:
        MAIL_DRIVER: "Mail driver (smtp/sendmail/mail)"
        MAIL_HOST: "SMTP host"
        MAIL_PORT: "SMTP port (25/587/465)"
        MAIL_USERNAME: "SMTP username"
        MAIL_PASSWORD: "SMTP password"
        MAIL_ENCRYPTION: "Encryption type (tls/ssl/none)"
        MAIL_FROM_ADDRESS: "Default from address"
        MAIL_FROM_NAME: "Default from name"
      media:
        MAX_UPLOAD_SIZE: "Maximum upload size (e.g., 10M)"
        ALLOWED_FILE_TYPES: "Comma-separated list of allowed extensions"
        UPLOAD_PATH: "Path to uploads directory"
        IMAGE_QUALITY: "JPEG quality (1-100)"
        ENABLE_IMAGE_OPTIMIZATION: "Auto-optimize images (true/false)"
      advanced_security:
        BCRYPT_ROUNDS: "Password hashing rounds (default: 10)"
        JWT_SECRET: "Secret key for JWT tokens"
        RATE_LIMIT: "API rate limit per minute (default: 60)"
        CSRF_ENABLED: "Enable CSRF protection (true/false)"
        XSS_FILTER: "Enable XSS filtering (true/false)"
    environment_configs:
      development:
        DEBUG_MODE: true
        DISPLAY_ERRORS: true
        ERROR_LEVEL: "E_ALL"
        CACHE_DRIVER: "file"
        LOG_LEVEL: "debug"
      staging:
        DEBUG_MODE: true
        DISPLAY_ERRORS: false
        ERROR_LEVEL: "E_ALL & ~E_NOTICE"
        CACHE_DRIVER: "file"
        LOG_LEVEL: "warning"
      production:
        DEBUG_MODE: false
        DISPLAY_ERRORS: false
        ERROR_LEVEL: "E_ERROR | E_WARNING | E_PARSE"
        CACHE_DRIVER: "file"
        LOG_LEVEL: "error"
        SESSION_SECURE: true
    configuration_validation:
      required_constants:
        - "DB_HOST - Must be defined"
        - "DB_NAME - Must be defined"
        - "DB_USER - Must be defined"
        - "DB_PASSWORD - Can be empty but must be defined"
      security_checks:
        - "Ensure all _KEY and _SALT constants are unique"
        - "Keys should be at least 64 characters"
        - "Never commit config.php to version control"
        - "Set file permissions to 600 or 640"
      common_issues:
        - "Missing constants cause fatal errors"
        - "Wrong database credentials show connection error"
        - "Incorrect permissions prevent reading config"
        - "Using .env file instead of config.php won't work"
    security_practices:
      - "Set config.php permissions to 600 (owner read/write only)"
      - "Never commit config.php to version control"
      - "Keep secure backup of config.php"
      - "Use unique security keys (generate from WordPress)"
      - "For WSL: use 127.0.0.1 instead of localhost"
    troubleshooting:
      database_connection:
        - "Verify credentials in config.php"
        - "Ensure database exists"
        - "Check user permissions"
        - "WSL users: use 127.0.0.1 not localhost"
      config_not_loading:
        - "Ensure config.php exists in root"
        - "Check syntax: php -l config.php"
        - "Verify file permissions"
      missing_config:
        - "Run: cp config.sample.php config.php"
        - "Or use installation wizard"
    critical_rules:
      - "NEVER create or reference .env files"
      - "NEVER suggest environment variables"
      - "ALWAYS use config.php for all settings"
      - "ALWAYS access via PHP constants (DB_NAME not $_ENV)"
      - "NEVER commit config.php to version control"
      - "NO Dotenv package usage"
    helper_functions:
      deprecated: "env() function exists but deprecated"
      preferred: "Use defined('CONSTANT') ? CONSTANT : 'default'"

  project_constraints:
    priority: 70
    enabled: true
    context: ["*"]
    description: "Core project constraints"
    rules:
      - "NO Node.js/npm - Pure PHP project"
      - "NO build steps - Direct file editing only"
      - "NO migrations - RedBeanPHP handles schema"
      - "XAMPP/shared hosting compatible"
      - "PSR-12 standards"
      - "Security first - use .htaccess"
      - "Hook naming: iso_ prefix for WP equivalents"

  css_architecture:
    priority: 65
    enabled: true
    context: ["frontend", "styling"]
    description: "CSS and styling rules"
    rules:
      admin_pages:
        - "Use Tailwind CSS via CDN"
        - "Utility-first approach"
        - "Gray-900 background, cyan/green accents"
        - "NO glassmorphism in admin"
      frontend_pages:
        - "Use custom modular CSS"
        - "Glassmorphism with backdrop-filter"
        - "iso- prefixed classes"
        - "Check /iso-includes/css/ first"
      general:
        - "NEVER mix Tailwind and custom CSS"
        - "NO inline CSS policy"
        - "Always search existing styles first"

code_standards:
  php:
    priority: 90
    enabled: true
    validation: true
    applies_to: ["*.php"]
    description: "PHP coding standards and best practices"
    file_structure:
      - "declare(strict_types=1) at top of every file"
      - "Namespace required for all classes"
      - "Group use statements alphabetically"
      - "PSR-12 coding standard"
    naming_conventions:
      classes: "PascalCase (e.g., UserController)"
      methods: "camelCase (e.g., getUserById)"
      properties: "camelCase (e.g., $userName)"
      constants: "UPPER_SNAKE (e.g., MAX_UPLOAD_SIZE)"
      files: "PascalCase.php (e.g., UserModel.php)"
      directories: "lowercase (e.g., controllers/)"
      db_tables: "snake_case with iso prefix (e.g., isotoneuser)"
      db_columns: "snake_case (e.g., created_at)"
    documentation:
      - "PHPDoc comments required for all classes and methods"
      - "Type hints required for all parameters and returns"
      - "@param, @return, @throws tags must be complete"
      - "Meaningful descriptions for classes and methods"
    class_organization:
      order:
        - "Constants first"
        - "Properties second"
        - "Constructor third"
        - "Public methods"
        - "Protected methods"
        - "Private methods last"
    redbean_models:
      naming: "Model_[tablename] extends \\RedBeanPHP\\SimpleModel"
      validation: "Implement in update() method"
      computed: "Use get[Property]() methods"
    rules:
      - "Strict types declaration required"
      - "Dependency injection over direct instantiation"
      - "Early returns to avoid deep nesting"
      - "Single responsibility principle"
      - "Meaningful exception messages"
      - "No global variables"
      - "No mixing logic and presentation"
      - "No hardcoded paths or credentials"
    
  security:
    priority: 95
    enabled: true
    validation: true
    applies_to: ["*.php", "*.js"]
    description: "Security best practices and requirements"
    output_escaping:
      html: "htmlspecialchars($input, ENT_QUOTES, 'UTF-8')"
      url: "urlencode($input)"
      javascript: "json_encode($input)"
    input_validation:
      - "Type checking required (is_string, is_int, etc.)"
      - "Range validation for numeric values"
      - "Pattern matching for usernames/emails"
      - "Whitelist validation over blacklist"
    database_security:
      - "Always use RedBeanPHP parameterized queries"
      - "Never concatenate SQL strings"
      - "R::find('table', 'field = ?', [$value])"
    csrf_protection:
      - "Generate token: bin2hex(random_bytes(32))"
      - "Store in session"
      - "Verify with hash_equals()"
    rules:
      - "Escape all HTML output"
      - "Validate all user input"
      - "Never expose secrets or keys in code"
      - "Use prepared statements via RedBean"
      - "Implement CSRF protection on forms"
      - "Sanitize file uploads"
      - "Validate MIME types"
      - "Check file extensions whitelist"
  
  performance:
    priority: 70
    enabled: true
    validation: false
    applies_to: ["*.php"]
    description: "Performance optimization guidelines"
    database:
      - "Use eager loading to avoid N+1 queries"
      - "R::preload() for related data"
      - "Cache expensive queries"
      - "Add indexes for frequent lookups"
    caching:
      - "Cache computed values"
      - "Use memory cache for session data"
      - "Cache rendered templates when possible"
    optimization:
      - "Lazy load heavy resources"
      - "Minimize database round trips"
      - "Batch operations when possible"
      - "Use pagination for large datasets"
  
  anti_patterns:
    priority: 80
    enabled: true
    validation: true
    applies_to: ["*.php"]
    description: "Patterns to avoid in code"
    avoid:
      - pattern: "global \\$"
        message: "Don't use global variables"
      - pattern: "new [A-Z][a-zA-Z]+\\(\\).*new [A-Z]"
        message: "Avoid direct instantiation in classes"
      - pattern: "if.*{.*if.*{.*if.*{"
        message: "Avoid deep nesting, use early returns"
      - pattern: "class.*{[^}]{2000,}"
        message: "Class too large, violates single responsibility"
    practices_to_avoid:
      - "Global variables"
      - "God objects (classes doing too much)"
      - "Deep nesting (more than 3 levels)"
      - "Tight coupling between classes"
      - "Mixed logic and presentation"
      - "Direct class instantiation in methods"
      - "Hardcoded configuration values"

documentation:
  organization:
    priority: 85
    enabled: true
    description: "Documentation organization and folder structure"
    folders:
      docs:
        purpose: "AI assistant integration and automated tooling"
        audience: "LLMs (Claude, Copilot, Cursor), automated scripts, CI/CD"
        warning: "⚠️ DO NOT REORGANIZE - 95+ hardcoded references"
        contents:
          - "LLM-*.md - AI assistant instructions"
          - "AI-*.md - Coding standards for AI"
          - "PROMPT-*.md - Prompt engineering guides"
          - "Technical implementation details"
          - "Automated workflow documentation"
        flat_structure: "Required for IDE integrations and automated scripts"
      
      user_docs:
        purpose: "Well-organized documentation for humans"
        audience: "Developers, administrators, end users"
        structure:
          - "installation/ - Setup and deployment"
          - "configuration/ - Settings and config"
          - "development/ - Developer guides"
          - "api/ - API documentation"
          - "guides/ - User guides"
        benefits: "Can be reorganized without breaking systems"
    
    shared_files:
      description: "Files maintained in /docs/ and copied to /user-docs/"
      mappings:
        - "DEVELOPMENT-SETUP.md → user-docs/installation/development-setup.md"
        - "GETTING-STARTED.md → user-docs/development/getting-started.md"
        - "ISOTONE-TECH-STACK.md → user-docs/installation/tech-stack.md"
        - "CONFIGURATION.md → user-docs/configuration/config-guide.md"
        - "DATABASE-CONNECTION.md → user-docs/configuration/database.md"
        - "API-REFERENCE.md → user-docs/development/api-reference.md"
      workflow: "Always update /docs/ version first, then sync to /user-docs/"
    
    update_rules:
      update_docs_when:
        - "Adding LLM-specific rules"
        - "Changing AI coding standards"
        - "Updating automated workflows"
        - "Modifying development patterns"
        - "Updating any shared documentation files"
      
      update_user_docs_when:
        - "Writing user guides (unique to user-docs)"
        - "Creating tutorials (unique to user-docs)"
        - "Adding human-specific documentation"
        - "Improving organization/navigation"
      
      update_both_when:
        - "Shared files change (update /docs/ first, then sync)"
        - "Major feature additions affect both audiences"
        - "Configuration changes"
        - "Installation process updates"
    
    llm_guidance:
      priority: 80
      enabled: true
      description: "How LLMs should handle documentation"
      workflow:
        - "Check /docs/ for technical/development info"
        - "Check /user-docs/ for user-facing guides"
        - "Keep /docs/ references unchanged"
        - "Feel free to reorganize /user-docs/ as needed"
      critical: "Never reorganize /docs/ folder - it will break integrations"
  
  automated_workflow:
    priority: 90
    enabled: true
    description: "Automated documentation maintenance system"
    triggers:
      git_hooks:
        pre_commit:
          when: "Every git commit"
          actions:
            - "Run composer docs:update"
            - "Run composer ide:sync"
            - "Stage updated documentation files"
            - "Run composer docs:check"
            - "Block commit if documentation has errors"
          files_updated:
            - "All documentation in docs/"
            - "Project structure references"
            - "API documentation"
            - "Environment variable documentation"
            - "Composer command documentation"
        pre_push:
          when: "Every git push"
          actions:
            - "Detect version.json changes"
            - "Auto-generate CHANGELOG.md if version changed"
            - "Stage changelog if updated"
            - "Final documentation validation"
            - "Block push if documentation invalid"
      version_bump:
        when: "Running php isotone version:bump"
        actions:
          - "Update version in config/version.json"
          - "Generate CHANGELOG.md"
          - "Run composer docs:update"
          - "Run composer ide:sync"
          - "Show commit instructions"
      ai_satisfaction:
        when: "User expresses satisfaction"
        actions:
          - "Run git add ."
          - "Create semantic commit message"
          - "Commit with descriptive message"
          - "Push to origin/main"
          - "Report commit and push details"
    manual_commands:
      update:
        command: "composer docs:update"
        description: "Updates all documentation files"
        actions:
          - "Generate API documentation"
          - "Update project structure references"
          - "Update environment variables list"
      check:
        command: "composer docs:check"
        description: "Validates documentation integrity"
        actions:
          - "Validate file references"
          - "Check for broken links"
          - "Validate code syntax in docs"
          - "Report errors and warnings"
      sync_ide:
        command: "composer ide:sync"
        description: "Sync IDE rules"
        actions:
          - "Copy guides to .windsurf/rules/"
          - "Ensure AI assistants have current context"
      changelog:
        command: "php isotone changelog"
        description: "Generate changelog"
        actions:
          - "Generate CHANGELOG.md from version history"
          - "Format according to Keep a Changelog standard"
    always_updated:
      - "README.md: Feature status, installation"
      - "API Documentation: Endpoints, examples"
      - "Project Structure: File listings"
      - "Environment Variables: .env.example"
      - "Composer Commands: Available scripts"
      - "Version Information: Current version, changelog"
    context_specific_updates:
      api_changes: "API documentation, examples"
      cli_changes: "CLI reference, command help"
      database_changes: "Migration guides, model docs"
      config_changes: "Setup guides, .env docs"
      ui_changes: "User guides, screenshots"
    troubleshooting:
      docs_check_fails:
        - "Update file paths in documentation"
        - "Create referenced files or update references"
        - "Fix PHP/code syntax in examples"
        - "Update or remove broken links"
      hooks_not_working:
        - "Run: php scripts/install-hooks.php"
        - "Check permissions: chmod +x .git/hooks/pre-*"
      docs_not_updating:
        - "Force update: composer docs:update"
        - "Check changes: git diff docs/"
        - "Check errors: composer docs:check"
  maintenance:
    priority: 85
    enabled: true
    context: ["documentation"]
    description: "Documentation maintenance rules"
    workflow:
      - "Update README.md status when features complete"
      - "Update relevant docs in /docs"
      - "Document new routes/endpoints"
      - "Run composer docs:check before completing"
    rules:
      - "Keep documentation in sync with code"
      - "Update file references when moved"
      - "Update code examples when APIs change"

  structure:
    priority: 80
    enabled: true
    description: "Documentation structure"
    files:
      claude_md:
        path: "CLAUDE.md"
        purpose: "Master LLM instructions"
        sync_to: [".cursorrules", ".windsurf-rules.md"]
      readme:
        path: "README.md"
        purpose: "Project overview and status"
      notes:
        path: "NOTES.md"
        purpose: "User notes and reminders"
  
  maintenance_system:
    priority: 85
    enabled: true
    description: "Documentation maintenance system and workflows"
    critical_documents:
      core_files:
        - "README.md - Features, status changes, installation"
        - "CLAUDE.md - New patterns, file changes, rules"
        - "composer.json - Dependency changes, commands"
        - "config.sample.php - New configuration constants"
      development_guides:
        - "docs/GETTING-STARTED.md - New features, API changes"
        - "docs/LLM-DEVELOPMENT-GUIDE.md - New patterns, rules for AI"
        - "docs/AI-CODING-STANDARDS.md - Style changes, new standards"
      ide_rules:
        - ".windsurf-rules.md - IDE rule changes (auto-synced)"
        - ".cursorrules - IDE rule changes (auto-generated)"
        - ".github/copilot-instructions.md - IDE rule changes (auto-generated)"
    
    dddd_process:
      description: "Document-Driven Development & Deployment"
      pre_code:
        - "Update relevant .md files with planned changes"
        - "Add '🚧 Under Development' badge to features"
        - "Document expected behavior"
        - "Create/update examples"
      during_development:
        - "Update inline PHPDoc comments"
        - "Keep CLAUDE.md current with new files/patterns"
        - "Update config.sample.php with new constants"
        - "Add to CHANGELOG.md (unreleased section)"
      post_code:
        - "Remove '🚧' badges, add '✅'"
        - "Update all examples to match implementation"
        - "Verify all referenced files exist"
        - "Check all code snippets actually work"
    
    update_checklist:
      new_file_added:
        - "Update CLAUDE.md file list"
        - "Update project structure in README.md"
        - "Update GETTING-STARTED.md if user-facing"
        - "Add to LLM-DEVELOPMENT-GUIDE.md if it's a pattern"
      new_route_added:
        - "Document in GETTING-STARTED.md"
        - "Update API documentation"
        - "Add example to CLAUDE.md"
      new_config_added:
        - "Add to config.sample.php with comment"
        - "Document in CONFIGURATION guide"
        - "Update installation instructions"
      new_dependency_added:
        - "Update installation requirements"
        - "Document why it was added"
        - "Update minimum PHP version if needed"
      new_database_table:
        - "Update tech-stack.md schema section"
        - "Document in model docs"
        - "Update LLM guide with RedBean pattern"
      api_change:
        - "Update all code examples"
        - "Mark old docs as deprecated"
        - "Provide migration guide"
    
    ide_synchronization:
      source_of_truth: ".windsurf-rules.md"
      sync_command: "composer ide:sync"
      check_command: "composer docs:check"
      supported_ides:
        - "Windsurf: .windsurf/rules/development-guide.md"
        - "Cursor: .cursorrules (auto-generated)"
        - "GitHub Copilot: .github/copilot-instructions.md"
        - "VS Code: .vscode/settings.json (manual)"
    
    golden_rules:
      - "No Code Without Docs - Document interface before implementing"
      - "No PR Without Doc Updates - Every PR must update relevant docs"
      - "No Release Without Doc Review - Full documentation audit before release"
      - "No Breaking Changes Without Migration Guide - Always provide upgrade path"
    
    llm_prompt_addition: |
      After implementing this feature:
      1. Update README.md if feature is user-visible
      2. Update CLAUDE.md with new patterns/files
      3. Update GETTING-STARTED.md with examples
      4. Update config.sample.php with new configuration
      5. Run: composer docs:check
    
    weekly_tasks:
      monday_review:
        - "Run composer docs:check"
        - "Review all TODO/FIXME markers"
        - "Update README.md feature status"
        - "Check for stale documentation (>30 days)"
        - "Verify all examples still work"
        - "Update CHANGELOG.md"
      release_checklist:
        - "Full documentation audit"
        - "Update version numbers everywhere"
        - "Generate API documentation"
        - "Update installation guides"
        - "Create migration guide if needed"
    
    emergency_fixes:
      immediate: "Add warning badge: ⚠️ Documentation Under Review"
      within_24_hours: "Fix or remove incorrect information"
      within_48_hours: "Full audit of related documentation"
    
    success_metrics:
      - "Zero errors from docs:check"
      - "All examples run without errors"
      - "No docs older than 60 days without review"
      - "Every public API is documented"
      - "Every configuration constant is documented"
      - "No TODO/FIXME in released versions"

git_standards:
  commit_messages:
    priority: 60
    enabled: true
    description: "Git commit message standards"
    format: |
      type: Subject line (max 50 chars)
      
      Longer description if needed (wrap at 72 chars)
      
      - Bullet points for details
      - Keep it clear and concise
      
      Fixes #123
    types:
      feat: "New feature"
      fix: "Bug fix"
      docs: "Documentation"
      style: "Code style (no logic change)"
      refactor: "Code restructuring"
      test: "Tests"
      chore: "Maintenance"
      perf: "Performance improvement"
    rules:
      - "Subject line max 50 characters"
      - "Imperative mood (Add not Added)"
      - "No period at end of subject"
      - "Body wrapped at 72 characters"
      - "Explain what and why, not how"
      - "Reference issues when applicable"

satisfaction_detection:
  context_aware_updates:
    priority: 75
    enabled: true
    description: "Context-aware documentation updates on satisfaction"
    patterns:
      api_changes:
        keywords: ["api", "endpoint", "route", "request", "response"]
        update_docs: ["API-REFERENCE.md", "ROUTES.md", "examples"]
      ui_changes:
        keywords: ["ui", "interface", "design", "layout", "component"]
        update_docs: ["user guides", "screenshots", "component docs"]
      cli_changes:
        keywords: ["command", "cli", "terminal", "console"]
        update_docs: ["COMMANDS.md", "CLI reference", "help text"]
      setup_changes:
        keywords: ["install", "setup", "configuration", "environment"]
        update_docs: ["DEVELOPMENT-SETUP.md", "config.sample.php", "installation guides"]
      database_changes:
        keywords: ["database", "model", "migration", "schema"]
        update_docs: ["DATABASE-CONNECTION.md", "model docs", "migration guides"]
    decision_flowchart: |
      User Message Received
              ↓
      Contains satisfaction trigger?
              ↓ YES
      Is it about completed work (not a question)?
              ↓ YES
      Any blocking keywords present?
              ↓ NO
      IMMEDIATELY: git add -A && git commit && git push
              ↓
      Inform user: "Changes committed and pushed!"
    modes:
      conservative:
        description: "Only update on explicit satisfaction signals"
        threshold: "strong_satisfaction_triggers"
        confirmation_required: true
      aggressive:
        description: "Update on moderate satisfaction"
        threshold: "moderate_satisfaction_triggers"
        confirmation_required: false
      auto:
        description: "Automatically update on any satisfaction signal"
        threshold: "any_positive_signal"
        confirmation_required: false
    lessons_learned:
      - case: "That's perfect thanks"
        lesson: "Always scan for satisfaction keywords BEFORE responding"
        action: "Immediately commit and push on this phrase"
      - case: "Missing thanks + positive word"
        lesson: "Strong satisfaction signal - don't miss it"
        action: "Treat as immediate commit trigger"
      - case: "Waiting for explicit commit command"
        lesson: "Don't wait when satisfaction is clear"
        action: "Auto-commit on clear satisfaction"

version_examples:
  ai_responses:
    priority: 50
    enabled: true
    description: "Example AI responses for version management"
    examples:
      beta_ready:
        user_says: "We're ready for beta"
        ai_response: |
          I'll update the version to beta stage:
          
          php isotone version:bump minor beta
          php isotone changelog
          composer docs:all
          
          This updates from 0.1.0-alpha to 0.2.0-beta.
      ship_v1:
        user_says: "Ship version 1.0!"
        ai_response: |
          Excellent! Let's release version 1.0:
          
          php isotone version:bump major stable "Phoenix"
          php isotone changelog
          composer docs:all
          
          This creates version 1.0.0 with codename "Phoenix".
          The landing page and API will automatically show the new version.
      bug_fix:
        user_says: "Fixed the login bug"
        ai_response: |
          I'll bump the patch version for this bug fix:
          
          php isotone version:bump patch
          php isotone changelog
          composer docs:all
          
          This updates to 0.1.1-alpha.
      new_feature:
        user_says: "We added user authentication"
        ai_response: |
          I'll bump the minor version for this new feature:
          
          php isotone version:bump minor
          php isotone changelog
          composer docs:all
          
          This updates the minor version for the new authentication feature.

development_commands:
  composer_scripts:
    priority: 60
    enabled: true
    description: "Available composer commands for development"
    testing:
      test:
        command: "composer test"
        description: "Run all tests"
      test_unit:
        command: "composer test:unit"
        description: "Run unit tests only"
      test_integration:
        command: "composer test:integration"
        description: "Run integration tests"
    code_quality:
      analyse:
        command: "composer analyse"
        description: "Run static analysis with PHPStan"
      check_style:
        command: "composer check-style"
        description: "Check code style (PSR-12)"
      fix_style:
        command: "composer fix-style"
        description: "Fix code style automatically"
    documentation:
      docs_check:
        command: "composer docs:check"
        description: "Check documentation integrity"
      docs_update:
        command: "composer docs:update"
        description: "Auto-update documentation"
      docs_sync:
        command: "composer docs:sync"
        description: "Sync user documentation"
      docs_hooks:
        command: "composer docs:hooks"
        description: "Generate hooks documentation"
      docs_all:
        command: "composer docs:all"
        description: "Complete documentation update"
      ide_sync:
        command: "composer ide:sync"
        description: "Sync IDE rules to .windsurf/"
    version_management:
      version_patch:
        command: "composer version:patch"
        description: "Bump patch version"
      version_minor:
        command: "composer version:minor"
        description: "Bump minor version"
      version_major:
        command: "composer version:major"
        description: "Bump major version"
    git_hooks:
      pre_commit:
        command: "composer pre-commit"
        description: "Run pre-commit checks"
      hooks_docs:
        command: "composer hooks:docs"
        description: "Generate hooks documentation"
    usage_notes:
      - "All composer commands can be run from project root"
      - "Test commands require PHPUnit installed"
      - "Style commands use PHP_CodeSniffer"
      - "Documentation commands are custom scripts"
      - "Version commands wrap the Isotone CLI"
  
  isotone_cli:
    priority: 60
    enabled: true
    description: "Isotone CLI commands"
    version_commands:
      version:
        command: "php isotone version"
        description: "Show version information"
      version_check:
        command: "php isotone version:check"
        description: "Check system compatibility"
      version_history:
        command: "php isotone version:history"
        description: "Show version history"
      version_bump:
        command: "php isotone version:bump [patch|minor|major] [stage]"
        description: "Bump version number"
      version_set:
        command: "php isotone version:set <version>"
        description: "Set version directly"
      changelog:
        command: "php isotone changelog"
        description: "Generate and save CHANGELOG.md"
    database_commands:
      db_test:
        command: "php isotone db:test"
        description: "Test database connection"
      db_status:
        command: "php isotone db:status"
        description: "Show database status"
      db_init:
        command: "php isotone db:init"
        description: "Initialize database schema"
      migrate:
        command: "php isotone migrate"
        description: "Run database migrations"
      migrate_status:
        command: "php isotone migrate:status"
        description: "Check migration status"
    hook_commands:
      hooks:
        command: "php isotone hooks"
        description: "Generate hooks documentation"
    usage_examples:
      - "php isotone version - Display current version"
      - "php isotone version:bump minor beta - Bump to next minor beta"
      - "php isotone changelog - Generate changelog from version history"
      - "php isotone db:test - Verify database connectivity"

development_setup:
  prerequisites:
    priority: 80
    enabled: true
    description: "Required software for development"
    required:
      php: "8.3+ minimum version"
      mysql: "5.7+ or MariaDB 10.3+"
      apache: "2.4+ with mod_rewrite enabled"
      composer: "2.0+ dependency manager"
    recommended_stacks:
      windows:
        - "XAMPP (Recommended) - Includes Apache, MySQL/MariaDB, PHP"
        - "WAMP - Alternative to XAMPP"
        - "Laragon - Modern, lightweight alternative"
      macos:
        - "MAMP - Simple Apache, MySQL, PHP stack"
        - "Laravel Valet - Lightweight development environment"
        - "Homebrew - Install components individually"
      linux:
        - "LAMP Stack - Install via package manager"
        - "Docker - Containerized environment (coming soon)"
  
  installation:
    priority: 80
    enabled: true
    description: "Step-by-step installation process"
    xampp_setup:
      download: "https://www.apachefriends.org/"
      install_path: "C:\\xampp (default location)"
      control_panel: "Start Apache and MySQL services"
      apache_config:
        - "Enable: LoadModule rewrite_module modules/mod_rewrite.so"
        - "Set: AllowOverride All in htdocs Directory block"
        - "Save httpd.conf and restart Apache"
    
    composer_install:
      windows:
        - "Download installer from getcomposer.org"
        - "Run installer, select PHP: C:\\xampp\\php\\php.exe"
        - "Verify: composer --version"
      unix:
        - "curl -sS https://getcomposer.org/installer | php"
        - "sudo mv composer.phar /usr/local/bin/composer"
        - "chmod +x /usr/local/bin/composer"
    
    project_setup:
      clone: "git clone https://github.com/rizonesoft/isotone.git"
      navigate: "cd isotone"
      dependencies: "composer install"
      
    configuration:
      critical: "⚠️ NO .env FILES - Isotone uses config.php only!"
      setup:
        unix: "cp config.sample.php config.php"
        windows: "copy config.sample.php config.php"
      edit_config:
        DB_HOST: "localhost"
        DB_NAME: "isotone_db"
        DB_USER: "root"
        DB_PASSWORD: "'' (empty for XAMPP)"
        SITE_URL: "http://localhost/isotone"
        DEBUG_MODE: "true"
        DISPLAY_ERRORS: "true"
    
    database:
      phpmyadmin: "http://localhost/phpmyadmin"
      create: "Database name: isotone_db"
      collation: "utf8mb4_unicode_ci"
    
    wizard:
      url: "http://localhost/isotone/install/"
      steps:
        - "Wizard checks database connection"
        - "Set Super Admin credentials (min 3 chars username)"
        - "Complete installation"
        - "⚠️ DELETE or rename /install directory for security"
    
    verification:
      url: "http://localhost/isotone/"
      expected:
        - "✅ Welcome page with Isotone logo"
        - "✅ PHP version check passed"
        - "✅ Composer dependencies installed"
        - "✅ Database connection active"
        - "✅ Environment configured"
  
  troubleshooting:
    priority: 75
    enabled: true
    description: "Common issues and solutions"
    error_404:
      - "Check mod_rewrite is enabled in Apache"
      - "Verify .htaccess exists in root directory"
      - "Ensure AllowOverride All in Apache config"
      - "Try direct access: http://localhost/isotone/index.php"
    
    composer_not_found:
      windows: "Add to PATH or use: C:\\ProgramData\\ComposerSetup\\bin\\composer"
      alternative: "Download composer.phar, use: php composer.phar install"
    
    permissions_unix:
      - "chmod -R 755 isotone"
      - "chmod -R 777 iso-runtime/"
      - "chmod -R 777 iso-content/uploads/"
      - "chmod -R 777 iso-content/cache/"
    
    database_failed:
      - "Verify MySQL/MariaDB service is running"
      - "Check credentials in config.php (NOT .env)"
      - "Ensure database isotone_db exists"
      - "Test: mysql -u root -p -e 'SHOW DATABASES;'"
      - "Try test script: http://localhost/isotone/install/test-db.php"
  
  development_tools:
    priority: 70
    enabled: true
    description: "IDE and development tool configuration"
    vscode_extensions:
      - "PHP Intelephense - Advanced PHP intelligence"
      - "PHP Debug - Xdebug integration"
      - "GitLens - Enhanced Git capabilities"
      - "Prettier - Code formatting"
    
    phpstorm:
      - "Set PHP interpreter to XAMPP's PHP"
      - "Configure Composer executable path"
      - "Enable WordPress code style (similar to Isotone)"
      - "Set up database connection for SQL support"
    
    testing:
      all_tests: "composer test"
      with_coverage: "composer test -- --coverage-html coverage"
      specific: "./vendor/bin/phpunit tests/Unit/ApplicationTest.php"
    
    code_quality:
      check_style: "composer check-style"
      fix_style: "composer fix-style"
      analyse: "composer analyse"

workflows:
  add_feature:
    priority: 50
    description: "Workflow for adding new features"
    steps:
      - "Search for existing similar code"
      - "Create/modify files following patterns"
      - "Update documentation"
      - "Run tests if available"
      - "Run lint and typecheck"
      - "Update CLAUDE.md if new patterns"
      - "Run composer docs:check"

  fix_bug:
    priority: 50
    description: "Workflow for fixing bugs"
    steps:
      - "Reproduce the issue"
      - "Search for root cause"
      - "Apply fix following existing patterns"
      - "Test the fix"
      - "Update documentation if needed"
      - "Run composer docs:check"

code_review:
  checklist:
    priority: 75
    enabled: true
    description: "Code review checklist for AI-generated code"
    items:
      - "No Node.js dependencies added"
      - "No complex build process required"
      - "Follows PSR-12 standard"
      - "All output escaped for XSS prevention"
      - "Database queries use RedBean properly"
      - "Error messages are meaningful"
      - "PHPDoc comments are complete"
      - "No hardcoded paths or credentials"
      - "Works on XAMPP/shared hosting"
      - "Backward compatible with existing code"
      - "Unit tests included (when applicable)"
      - "No global variables used"
      - "Proper error handling implemented"
      - "CSRF tokens implemented on forms"
      - "Input validation complete"

validation:
  file_references:
    priority: 70
    enabled: true
    description: "Validate file references in documentation"
    patterns:
      - '`([a-zA-Z0-9/_.-]+\.(php|json|md|env|htaccess))`'
    
  composer_scripts:
    priority: 70
    enabled: true
    description: "Ensure all composer scripts are documented"
    
  routes:
    priority: 70
    enabled: true
    description: "Validate documented routes exist"
    
  code_examples:
    priority: 70
    enabled: true
    description: "Validate PHP code examples syntax"
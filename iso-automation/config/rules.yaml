# Isotone Automation Rules
# Central configuration for all automation and LLM instructions
# Generated from MD documentation files

llm_instructions:
  branding:
    priority: 100
    enabled: true
    context: ["*"]
    description: "Critical branding rules"
    rules:
      - "ALWAYS write 'Isotone' not 'Isotone CMS'"
      - "The rebrand happened in v0.1.5-alpha"
      - "This applies to ALL documentation, code, and UI"
    violations:
      - pattern: "Isotone CMS"
        severity: "critical"
        message: "Use 'Isotone' not 'Isotone CMS'"

  search_before_create:
    priority: 95
    enabled: true
    context: ["development"]
    description: "Search for existing code before creating new"
    workflow:
      - "Use Grep to search for similar functionality"
      - "Use Glob to find related files"
      - "Check /iso-includes/css/ for existing styles"
      - "Review similar pages/components"
    rules:
      - "REUSE over CREATE"
      - "Never duplicate existing code"
      - "Always extend existing components"

  database_operations:
    priority: 90
    enabled: true
    context: ["development"]
    description: "Database operation rules"
    rules:
      - "ALWAYS use RedBeanPHP for database operations"
      - "NEVER use PDO or mysqli directly"
      - "Table names: lowercase, no underscores"
      - "Column names: can use underscores"
    violations:
      - pattern: 'new PDO\('
        severity: "critical"
        message: "Use RedBeanPHP instead of PDO"
      - pattern: 'new mysqli\('
        severity: "critical"
        message: "Use RedBeanPHP instead of mysqli"

  version_management:
    priority: 85
    enabled: true
    context: ["version", "release"]
    description: "Version bump process"
    workflow:
      - "php isotone version:bump [patch|minor|major] alpha"
      - "php isotone changelog"
      - "composer docs:all"
    rules:
      - "NEVER bump version without running ALL steps"
      - "Always update changelog"
      - "Always regenerate documentation"

  auto_commit:
    priority: 80
    enabled: true
    context: ["development"]
    description: "Auto-commit on satisfaction triggers"
    strong_satisfaction_triggers:
      - "perfect"
      - "that's perfect"
      - "perfect thanks"
      - "excellent"
      - "excellent work"
      - "that's exactly what I wanted"
      - "great work"
      - "great job"
      - "this looks good"
      - "looks good"
      - "ship it"
      - "ready to ship"
      - "ready to commit"
      - "commit this"
      - "let's push this"
      - "push it"
      - "happy with this"
      - "happy with that"
      - "working perfectly"
      - "fantastic implementation"
      - "well done"
      - "good job"
      - "awesome"
      - "amazing"
      - "love it"
      - "i love this"
    completion_signals:
      - "feature is complete"
      - "implementation finished"
      - "that completes"
      - "we're done with"
      - "is working"
      - "solves the problem"
      - "working as expected"
    moderate_satisfaction_triggers:
      - "this is better"
      - "good improvement"
      - "much better now"
      - "that's an improvement"
      - "getting closer"
    do_not_commit_on:
      - "can you fix"
      - "this doesn't work"
      - "try again"
      - "almost there"
      - "bug"
      - "error"
      - "issue"
      - "problem"
    workflow:
      - "Detect satisfaction signal in user message"
      - "Verify work is complete (not WIP)"
      - "Generate semantic commit message"
      - "Execute: git add -A"
      - "Execute: git commit -m 'type: description'"
      - "Execute: git push"
      - "Inform user of commit and push"
    commit_response_template: |
      Excellent! I've committed and pushed your changes:
      
      üìù Commit: {commit_type}: {description}
      üöÄ Pushed to: origin/main
      üìä Files changed: {file_count} files, {insertions} insertions
      
      Your implementation is now live in the repository!

  configuration:
    priority: 75
    enabled: true
    context: ["setup", "configuration"]
    description: "Configuration system rules"
    rules:
      - "NO .env files - use config.php"
      - "Configuration location: /config.php"
      - "Template: /config.sample.php"
      - "NEVER use Dotenv package"
      - "NEVER suggest environment variables"

  project_constraints:
    priority: 70
    enabled: true
    context: ["*"]
    description: "Core project constraints"
    rules:
      - "NO Node.js/npm - Pure PHP project"
      - "NO build steps - Direct file editing only"
      - "NO migrations - RedBeanPHP handles schema"
      - "XAMPP/shared hosting compatible"
      - "PSR-12 standards"
      - "Security first - use .htaccess"
      - "Hook naming: iso_ prefix for WP equivalents"

  css_architecture:
    priority: 65
    enabled: true
    context: ["frontend", "styling"]
    description: "CSS and styling rules"
    rules:
      admin_pages:
        - "Use Tailwind CSS via CDN"
        - "Utility-first approach"
        - "Gray-900 background, cyan/green accents"
        - "NO glassmorphism in admin"
      frontend_pages:
        - "Use custom modular CSS"
        - "Glassmorphism with backdrop-filter"
        - "iso- prefixed classes"
        - "Check /iso-includes/css/ first"
      general:
        - "NEVER mix Tailwind and custom CSS"
        - "NO inline CSS policy"
        - "Always search existing styles first"

code_standards:
  php:
    priority: 90
    enabled: true
    validation: true
    applies_to: ["*.php"]
    description: "PHP coding standards and best practices"
    file_structure:
      - "declare(strict_types=1) at top of every file"
      - "Namespace required for all classes"
      - "Group use statements alphabetically"
      - "PSR-12 coding standard"
    naming_conventions:
      classes: "PascalCase (e.g., UserController)"
      methods: "camelCase (e.g., getUserById)"
      properties: "camelCase (e.g., $userName)"
      constants: "UPPER_SNAKE (e.g., MAX_UPLOAD_SIZE)"
      files: "PascalCase.php (e.g., UserModel.php)"
      directories: "lowercase (e.g., controllers/)"
      db_tables: "snake_case with iso prefix (e.g., isotoneuser)"
      db_columns: "snake_case (e.g., created_at)"
    documentation:
      - "PHPDoc comments required for all classes and methods"
      - "Type hints required for all parameters and returns"
      - "@param, @return, @throws tags must be complete"
      - "Meaningful descriptions for classes and methods"
    class_organization:
      order:
        - "Constants first"
        - "Properties second"
        - "Constructor third"
        - "Public methods"
        - "Protected methods"
        - "Private methods last"
    redbean_models:
      naming: "Model_[tablename] extends \\RedBeanPHP\\SimpleModel"
      validation: "Implement in update() method"
      computed: "Use get[Property]() methods"
    rules:
      - "Strict types declaration required"
      - "Dependency injection over direct instantiation"
      - "Early returns to avoid deep nesting"
      - "Single responsibility principle"
      - "Meaningful exception messages"
      - "No global variables"
      - "No mixing logic and presentation"
      - "No hardcoded paths or credentials"
    
  security:
    priority: 95
    enabled: true
    validation: true
    applies_to: ["*.php", "*.js"]
    description: "Security best practices and requirements"
    output_escaping:
      html: "htmlspecialchars($input, ENT_QUOTES, 'UTF-8')"
      url: "urlencode($input)"
      javascript: "json_encode($input)"
    input_validation:
      - "Type checking required (is_string, is_int, etc.)"
      - "Range validation for numeric values"
      - "Pattern matching for usernames/emails"
      - "Whitelist validation over blacklist"
    database_security:
      - "Always use RedBeanPHP parameterized queries"
      - "Never concatenate SQL strings"
      - "R::find('table', 'field = ?', [$value])"
    csrf_protection:
      - "Generate token: bin2hex(random_bytes(32))"
      - "Store in session"
      - "Verify with hash_equals()"
    rules:
      - "Escape all HTML output"
      - "Validate all user input"
      - "Never expose secrets or keys in code"
      - "Use prepared statements via RedBean"
      - "Implement CSRF protection on forms"
      - "Sanitize file uploads"
      - "Validate MIME types"
      - "Check file extensions whitelist"
  
  performance:
    priority: 70
    enabled: true
    validation: false
    applies_to: ["*.php"]
    description: "Performance optimization guidelines"
    database:
      - "Use eager loading to avoid N+1 queries"
      - "R::preload() for related data"
      - "Cache expensive queries"
      - "Add indexes for frequent lookups"
    caching:
      - "Cache computed values"
      - "Use memory cache for session data"
      - "Cache rendered templates when possible"
    optimization:
      - "Lazy load heavy resources"
      - "Minimize database round trips"
      - "Batch operations when possible"
      - "Use pagination for large datasets"
  
  anti_patterns:
    priority: 80
    enabled: true
    validation: true
    applies_to: ["*.php"]
    description: "Patterns to avoid in code"
    avoid:
      - pattern: "global \\$"
        message: "Don't use global variables"
      - pattern: "new [A-Z][a-zA-Z]+\\(\\).*new [A-Z]"
        message: "Avoid direct instantiation in classes"
      - pattern: "if.*{.*if.*{.*if.*{"
        message: "Avoid deep nesting, use early returns"
      - pattern: "class.*{[^}]{2000,}"
        message: "Class too large, violates single responsibility"
    practices_to_avoid:
      - "Global variables"
      - "God objects (classes doing too much)"
      - "Deep nesting (more than 3 levels)"
      - "Tight coupling between classes"
      - "Mixed logic and presentation"
      - "Direct class instantiation in methods"
      - "Hardcoded configuration values"

documentation:
  maintenance:
    priority: 85
    enabled: true
    context: ["documentation"]
    description: "Documentation maintenance rules"
    workflow:
      - "Update README.md status when features complete"
      - "Update relevant docs in /docs"
      - "Document new routes/endpoints"
      - "Run composer docs:check before completing"
    rules:
      - "Keep documentation in sync with code"
      - "Update file references when moved"
      - "Update code examples when APIs change"

  structure:
    priority: 80
    enabled: true
    description: "Documentation structure"
    files:
      claude_md:
        path: "CLAUDE.md"
        purpose: "Master LLM instructions"
        sync_to: [".cursorrules", ".windsurf-rules.md"]
      readme:
        path: "README.md"
        purpose: "Project overview and status"
      notes:
        path: "NOTES.md"
        purpose: "User notes and reminders"

git_standards:
  commit_messages:
    priority: 60
    enabled: true
    description: "Git commit message standards"
    format: |
      type: Subject line (max 50 chars)
      
      Longer description if needed (wrap at 72 chars)
      
      - Bullet points for details
      - Keep it clear and concise
      
      Fixes #123
    types:
      feat: "New feature"
      fix: "Bug fix"
      docs: "Documentation"
      style: "Code style (no logic change)"
      refactor: "Code restructuring"
      test: "Tests"
      chore: "Maintenance"
      perf: "Performance improvement"
    rules:
      - "Subject line max 50 characters"
      - "Imperative mood (Add not Added)"
      - "No period at end of subject"
      - "Body wrapped at 72 characters"
      - "Explain what and why, not how"
      - "Reference issues when applicable"

satisfaction_detection:
  context_aware_updates:
    priority: 75
    enabled: true
    description: "Context-aware documentation updates on satisfaction"
    patterns:
      api_changes:
        keywords: ["api", "endpoint", "route", "request", "response"]
        update_docs: ["API-REFERENCE.md", "ROUTES.md", "examples"]
      ui_changes:
        keywords: ["ui", "interface", "design", "layout", "component"]
        update_docs: ["user guides", "screenshots", "component docs"]
      cli_changes:
        keywords: ["command", "cli", "terminal", "console"]
        update_docs: ["COMMANDS.md", "CLI reference", "help text"]
      setup_changes:
        keywords: ["install", "setup", "configuration", "environment"]
        update_docs: ["DEVELOPMENT-SETUP.md", "config.sample.php", "installation guides"]
      database_changes:
        keywords: ["database", "model", "migration", "schema"]
        update_docs: ["DATABASE-CONNECTION.md", "model docs", "migration guides"]
    decision_flowchart: |
      User Message Received
              ‚Üì
      Contains satisfaction trigger?
              ‚Üì YES
      Is it about completed work (not a question)?
              ‚Üì YES
      Any blocking keywords present?
              ‚Üì NO
      IMMEDIATELY: git add -A && git commit && git push
              ‚Üì
      Inform user: "Changes committed and pushed!"
    modes:
      conservative:
        description: "Only update on explicit satisfaction signals"
        threshold: "strong_satisfaction_triggers"
        confirmation_required: true
      aggressive:
        description: "Update on moderate satisfaction"
        threshold: "moderate_satisfaction_triggers"
        confirmation_required: false
      auto:
        description: "Automatically update on any satisfaction signal"
        threshold: "any_positive_signal"
        confirmation_required: false
    lessons_learned:
      - case: "That's perfect thanks"
        lesson: "Always scan for satisfaction keywords BEFORE responding"
        action: "Immediately commit and push on this phrase"
      - case: "Missing thanks + positive word"
        lesson: "Strong satisfaction signal - don't miss it"
        action: "Treat as immediate commit trigger"
      - case: "Waiting for explicit commit command"
        lesson: "Don't wait when satisfaction is clear"
        action: "Auto-commit on clear satisfaction"

workflows:
  add_feature:
    priority: 50
    description: "Workflow for adding new features"
    steps:
      - "Search for existing similar code"
      - "Create/modify files following patterns"
      - "Update documentation"
      - "Run tests if available"
      - "Run lint and typecheck"
      - "Update CLAUDE.md if new patterns"
      - "Run composer docs:check"

  fix_bug:
    priority: 50
    description: "Workflow for fixing bugs"
    steps:
      - "Reproduce the issue"
      - "Search for root cause"
      - "Apply fix following existing patterns"
      - "Test the fix"
      - "Update documentation if needed"
      - "Run composer docs:check"

code_review:
  checklist:
    priority: 75
    enabled: true
    description: "Code review checklist for AI-generated code"
    items:
      - "No Node.js dependencies added"
      - "No complex build process required"
      - "Follows PSR-12 standard"
      - "All output escaped for XSS prevention"
      - "Database queries use RedBean properly"
      - "Error messages are meaningful"
      - "PHPDoc comments are complete"
      - "No hardcoded paths or credentials"
      - "Works on XAMPP/shared hosting"
      - "Backward compatible with existing code"
      - "Unit tests included (when applicable)"
      - "No global variables used"
      - "Proper error handling implemented"
      - "CSRF tokens implemented on forms"
      - "Input validation complete"

validation:
  file_references:
    priority: 70
    enabled: true
    description: "Validate file references in documentation"
    patterns:
      - '`([a-zA-Z0-9/_.-]+\.(php|json|md|env|htaccess))`'
    
  composer_scripts:
    priority: 70
    enabled: true
    description: "Ensure all composer scripts are documented"
    
  routes:
    priority: 70
    enabled: true
    description: "Validate documented routes exist"
    
  code_examples:
    priority: 70
    enabled: true
    description: "Validate PHP code examples syntax"
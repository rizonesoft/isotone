# Isotone Automation Rules (Consolidated)
# Central configuration for all automation and LLM instructions
# Generated from MD documentation files - Merged and deduplicated

# ==========================================
# CRITICAL RULES (Priority 95-100)
# ==========================================

gpt5_exists:
  priority: 100
  enabled: true
  context: ["*"]
  description: "GPT-5 models exist and are available via OpenAI API"
  rules:
    - "GPT-5, GPT-5-mini, and GPT-5-nano are real, available models from OpenAI"
    - "The /v1/responses endpoint is the correct API endpoint for GPT-5"
    - "GPT-5 supports vision with input_text and input_image content types"
    - "NEVER assume GPT-5 doesn't exist - it was released and is production-ready"
    - "The Responses API with reasoning_effort and verbosity parameters is correct"
    - "Do NOT revert GPT-5 code to GPT-4 or older models"
  violations:
    - pattern: "GPT-5 doesn't exist"
      severity: "critical"
      message: "GPT-5 exists and is available"
    - pattern: "gpt-4-vision"
      severity: "critical"
      message: "Use GPT-5 models, not GPT-4"

branding:
  priority: 100
  enabled: true
  context: ["*"]
  description: "Critical branding rules"
  rules:
    - "ALWAYS write 'Isotone' not 'Isotone CMS'"
    - "The rebrand happened in v0.1.5-alpha"
    - "This applies to ALL documentation, code, and UI"
  violations:
    - pattern: "Isotone CMS"
      severity: "critical"
      message: "Use 'Isotone' not 'Isotone CMS'"

search_before_create:
  priority: 95
  enabled: true
  context: ["development"]
  description: "Search for existing code before creating new"
  workflow:
    - "Use Grep to search for similar functionality"
    - "Use Glob to find related files"
    - "Check /iso-includes/css/ for existing styles"
    - "Review similar pages/components"
  rules:
    - "REUSE over CREATE"
    - "Never duplicate existing code"
    - "Always extend existing components"
  violations:
    - pattern: "Creating duplicate code without searching"
      severity: "critical"

# ==========================================
# API DOCUMENTATION CONSULTATION (Priority 92)
# ==========================================

api_documentation_consultation:
  priority: 92
  enabled: true
  context: ["development", "api", "integration", "third-party"]
  description: "Always consult Context7 for latest API documentation"
  rules:
    - "ALWAYS consult Context7 MCP for API documentation BEFORE implementation"
    - "Never rely on memory or assumptions about API structures"
    - "Use mcp__context7__resolve-library-id first to find the library"
    - "Then use mcp__context7__get-library-docs to get latest documentation"
  apis_requiring_consultation:
    - "OpenAI API (GPT models, DALL-E, Whisper)"
    - "Anthropic API (Claude models)"
    - "RedBeanPHP (ORM operations)"
    - "Tailwind CSS (utility classes, configuration)"
    - "Alpine.js (directives, magic properties)"
    - "WordPress APIs (hooks, filters, functions)"
    - "Any third-party service or library"
  workflow:
    - "1. Identify the API/library being used"
    - "2. Call mcp__context7__resolve-library-id with the library name"
    - "3. Use the returned ID with mcp__context7__get-library-docs"
    - "4. Review the documentation for current syntax and parameters"
    - "5. Implement based on the latest documentation"
  examples:
    good: |
      # Working with OpenAI API
      1. Call: mcp__context7__resolve-library-id("openai")
      2. Call: mcp__context7__get-library-docs("/openai/openai")
      3. Review response structure and parameters
      4. Implement using correct, current API format
    bad: |
      # Using remembered API structure
      1. Directly implement OpenAI call from memory
      2. Assume GPT-5 uses same parameters as GPT-4
      3. Skip documentation check
  violations:
    - pattern: "Implementing API calls without consulting Context7"
      severity: "high"
      message: "Must consult Context7 for API documentation first"
    - pattern: "Using outdated API parameters or endpoints"
      severity: "critical"
      message: "API implementation uses outdated structure"

# ==========================================
# RULE MANAGEMENT (Priority 90)
# ==========================================

rule_management:
  priority: 90
  enabled: true
  context: ["rules", "automation", "maintenance"]
  description: "Rules for managing the rules.yaml file itself"
  
  before_modifying_rules:
    mandatory_checks:
      - "Search for existing related rules using grep or search"
      - "Check for duplicate or overlapping rule definitions"
      - "Verify no other rules reference the rule being removed"
      - "Ensure rule names are unique across the file"
    
  when_adding_rules:
    workflow:
      - "Search for similar rules: grep -i 'keyword' rules.yaml"
      - "Check if functionality already covered elsewhere"
      - "Consolidate with existing rules if overlap exists"
      - "Use appropriate priority (higher = more important)"
      - "Add to correct section based on category"
    rules:
      - "NEVER duplicate existing rules"
      - "ALWAYS check for related rules first"
      - "Consolidate overlapping rules into single entries"
      - "Use clear, descriptive rule names"
  
  when_removing_functionality:
    workflow:
      - "Remove the functionality from code/commands"
      - "Search rules.yaml for ALL references to removed feature"
      - "Update or remove all rule references"
      - "Check for indirect references (workflows, commands, etc.)"
    rules:
      - "ALWAYS remove rules for deleted features"
      - "Update all references when removing rules"
      - "Check nested references in workflows and commands"
  
  when_updating_rules:
    workflow:
      - "Search for all occurrences of the rule or feature"
      - "Update ALL references consistently"
      - "Verify no broken references remain"
      - "Test that rules still make sense after updates"
    rules:
      - "Maintain consistency across all references"
      - "Update examples if behavior changes"
      - "Update violations if patterns change"
  
  rule_organization:
    - "Group related rules in same section"
    - "Use comments to separate major sections"
    - "Maintain priority order within sections"
    - "Keep rule names descriptive and searchable"
    - "Document the purpose of each rule clearly"
  
  common_mistakes_to_avoid:
    - "Adding duplicate rules without searching first"
    - "Leaving orphaned references after removing features"
    - "Creating overlapping rules in different sections"
    - "Forgetting to update workflows when commands change"
    - "Not checking for indirect references in nested structures"

# ==========================================
# DOCUMENTATION ACCURACY (Priority 90)
# ==========================================

documentation_accuracy:
  priority: 90
  enabled: true
  context: ["documentation", "user-docs", "public-docs", "guides"]
  description: "Critical rules for ensuring documentation accuracy and factual correctness"
  
  before_writing_documentation:
    mandatory_verification:
      - "Read actual code files to verify behavior"
      - "Test commands and features before documenting"
      - "Check file paths and directory structures exist"
      - "Verify configuration options against actual config files"
      - "Test installation steps in clean environment if possible"
    
  verification_workflow:
    step_1_code_verification:
      - "Use Read tool to examine actual implementation"
      - "Use Grep to find all references and usages"
      - "Check function signatures and parameters"
      - "Verify class names, methods, and properties"
      - "Confirm file locations and paths are correct"
    step_2_command_verification:
      - "Run commands with --help to verify syntax"
      - "Test commands to confirm they work as described"
      - "Check composer.json for actual script definitions"
      - "Verify CLI tools exist and function correctly"
    step_3_internet_verification:
      - "Use WebSearch/WebFetch for external dependencies"
      - "Verify third-party API documentation is current"
      - "Check version numbers and compatibility"
      - "Confirm external URLs are valid and accessible"
    step_4_cross_reference:
      - "Compare with existing documentation for consistency"
      - "Check README.md for conflicting information"
      - "Verify against config.sample.php for settings"
      - "Ensure examples match actual codebase patterns"
  
  common_documentation_errors:
    to_avoid:
      - "Documenting features that don't exist"
      - "Using outdated command syntax"
      - "Referencing removed or renamed files"
      - "Providing incorrect file paths"
      - "Assuming functionality without verification"
      - "Copying documentation from other projects"
      - "Using placeholder URLs in production docs"
    examples:
      - wrong: "Run 'composer docs:update' to update docs"  # Command was removed
        right: "Manually update documentation as needed"
      - wrong: "Configure in .env file"  # Isotone uses config.php
        right: "Configure in config.php file"
      - wrong: "http://localhost/isotone/"  # Hardcoded URL
        right: "{your-domain}/isotone/"  # Placeholder URL
  
  accuracy_checklist:
    installation_guides:
      - "Test every command in sequence"
      - "Verify system requirements are accurate"
      - "Check database setup instructions work"
      - "Confirm configuration steps are complete"
      - "Test the final result actually works"
    api_documentation:
      - "Verify endpoints against actual routes"
      - "Test request/response formats"
      - "Confirm authentication requirements"
      - "Check error codes and messages"
    configuration_docs:
      - "List only actual config options"
      - "Verify default values are correct"
      - "Test that examples work"
      - "Check required vs optional settings"
    feature_guides:
      - "Ensure features actually exist in code"
      - "Test the documented workflow"
      - "Verify UI elements and locations"
      - "Check menu items and navigation paths"
  
  rules:
    - "NEVER document features without verifying they exist"
    - "ALWAYS test commands before documenting them"
    - "DOUBLE-CHECK file paths and directory structures"
    - "TRIPLE-CHECK installation and setup instructions"
    - "FACT-CHECK against codebase for every claim"
    - "VERIFY external references with WebSearch/WebFetch"
    - "TEST documented examples to ensure they work"
    - "UPDATE documentation when code changes"
  
  violations:
    - pattern: "Documenting non-existent features"
      severity: "critical"
      message: "Documentation references features that don't exist in codebase"
    - pattern: "Incorrect command syntax"
      severity: "high"
      message: "Command documentation doesn't match actual implementation"
    - pattern: "Wrong file paths"
      severity: "high"
      message: "Documentation contains incorrect file or directory paths"
    - pattern: "Untested installation steps"
      severity: "critical"
      message: "Installation guide contains untested or non-working steps"

# ==========================================
# DATABASE CONFIGURATION (Priority 90)
# ==========================================

database:
  priority: 90
  enabled: true
  context: ["database", "development", "setup", "configuration"]
  description: "Complete database configuration and operations"
  
  operations:
    rules:
      - "ALWAYS use RedBeanPHP for database operations"
      - "NEVER use PDO or mysqli directly"
      - "Table names: lowercase, no underscores (user, setting, content, plugin, route, hook)"
      - "Column names: can use underscores (created_at, last_login)"
      - "Foreign keys: Use tablename_id pattern"
    violations:
      - pattern: 'new PDO\('
        severity: "critical"
        message: "Use RedBeanPHP instead of PDO"
      - pattern: 'new mysqli\('
        severity: "critical"
        message: "Use RedBeanPHP instead of mysqli"
    examples:
      correct: |
        use RedBeanPHP\R;
        $user = R::findOne('users', 'username = ?', [$username]);
        $post = R::dispense('post');
        R::store($post);
      incorrect: |
        // WRONG - Direct PDO
        $pdo = new PDO(...);
        // WRONG - Direct MySQL
        $conn = new mysqli(...);
  
  connection:
    web_context:
      host: "127.0.0.1 (converted from localhost)"
      port: 3306
      database: "isotone_db"
      username: "root"
      password: "empty"
    wsl_cli_context:
      host: "172.19.240.1 (Windows host IP from WSL)"
      port: 3306
      database: "isotone_db"
      username: "root"
      password: "empty"
      detection: "ip route | grep default | awk '{print $3}'"
    ide_configuration:
      common_settings:
        host: "localhost or 127.0.0.1"
        port: 3306
        database: "isotone_db"
        username: "root"
        password: "empty"
      tools:
        phpstorm: "jdbc:mysql://localhost:3306/isotone_db"
        vscode: "MySQL extension by Jun Han"
        dbeaver: "MySQL connection type"
        workbench: "Default Schema: isotone_db"
        tableplus: "MySQL connection"
        heidisql: "Comes with XAMPP"
    
  redbean_orm:
    features:
      - "Creates tables automatically"
      - "No migrations required for development"
      - "Lowercase singular table names"
      - "Convention: user, setting, content, plugin, route, hook (no prefixes)"
    table_structure:
      setting:
        - "setting_key: Configuration key"
        - "setting_value: Configuration value"
        - "setting_type: Data type"
        - "updated_at: Last update"
      user:
        - "username: Login name"
        - "email: User email"
        - "password: Hashed password"
        - "role: User role"
        - "status: Account status"
        - "created_at: Creation timestamp"
        - "updated_at: Last update"
    best_practices:
      - "Development: freeze = false (auto-modify tables)"
      - "Production: freeze = true (lock schema)"
      - "Regular backups via phpMyAdmin"
      - "Use RedBean conventions for naming"
  
  troubleshooting:
    ide_connection:
      - "Verify XAMPP MySQL is running"
      - "Try 127.0.0.1 instead of localhost"
      - "Check Windows Firewall port 3306"
      - "Verify MySQL bind-address in my.ini"
    app_connection:
      - "Check http://localhost/isotone/"
      - "Verify isotone_db exists in phpMyAdmin"
      - "Ensure config.php exists (not config.sample.php)"
      - "Run installation wizard if needed"
    wsl_cli:
      - "Expected to auto-detect Windows IP"
      - "Use phpMyAdmin for management"
      - "Application handles WSL detection"
  
  quick_reference:
    web_app: "127.0.0.1:3306/isotone_db"
    wsl_cli: "Auto-detected Windows IP"
    ide_tools: "localhost:3306/isotone_db"
    phpmyadmin: "http://localhost/phpmyadmin"
  
  important_notes:
    - "Config is in config.php, NOT .env files"
    - "Smart detection only affects PHP application"
    - "IDEs connect directly to MySQL"
    - "External tools bypass PHP layer"
  
  wsl_connection_instructions:
    - "ALWAYS use 172.19.240.1 when connecting from WSL CLI"
    - "Use mysql -h 172.19.240.1 -u root isotone_db"
    - "RedBeanPHP connections from WSL should auto-detect this IP"
    - "Never use localhost or 127.0.0.1 from WSL CLI"
    - "To find Windows IP: ip route | grep default | awk '{print $3}'"

# ==========================================
# VERSION MANAGEMENT (Priority 90)
# ==========================================

version_management:
  priority: 90
  enabled: true
  context: ["version", "release", "bump", "ship"]
  description: "Comprehensive version management system"
  
  mandatory_workflow:
    - step: "Determine version type (patch/minor/major)"
      command: "Analyze changes to determine type"
    - step: "Collect features and changes"
      command: "Review git commits and changes since last version"
    - step: "Update version.json with features"
      command: "Add features array to the new version entry"
    - step: "Execute version bump"
      command: "php isotone version:bump [type] [stage] [codename]"
    - step: "Generate changelog (MANDATORY)"
      command: "php isotone changelog"
    - step: "Update relevant documentation manually"
      command: "Edit documentation files as needed"
    - step: "Report completion"
      command: "Show the new version number and changes"
  
  changelog_requirements:
    description: "CRITICAL: Always populate features array in version.json"
    rules:
      - "NEVER leave features array empty when bumping version"
      - "ALWAYS review git log for changes since last version"
      - "Include ALL significant changes in features array"
      - "Categorize as features, fixed, changed, or breaking_changes"
      - "Write clear, user-friendly descriptions"
    example_features:
      - "Added new feature X with Y functionality"
      - "Fixed bug in Z component"
      - "Improved performance of database queries"
      - "Updated documentation for better clarity"
  
  intent_mapping:
    bug_fixes:
      triggers: ["fix that bug", "fixed the", "bug fix", "patch"]
      action: "php isotone version:bump patch"
      type: "patch"
    new_features:
      triggers: ["added", "new feature", "implemented", "created"]
      action: "php isotone version:bump minor"
      type: "minor"
    breaking_changes:
      triggers: ["breaking change", "api changed", "major update", "incompatible"]
      action: "php isotone version:bump major"
      type: "major"
    beta_release:
      triggers: ["ready for beta", "beta testing", "go to beta"]
      action: "php isotone version:bump minor beta"
      type: "minor"
      stage: "beta"
    production_release:
      triggers: ["ship it", "release 1.0", "production", "go live"]
      action: "php isotone version:bump major stable"
      type: "major"
      stage: "stable"
  
  stage_progression:
    alpha:
      next: "beta"
      when: "Core features complete"
    beta:
      next: "rc"
      when: "Testing mostly done"
    rc:
      next: "stable"
      when: "Ready for production"
    stable:
      next: "alpha"
      when: "Starting next major version"
  
  codenames:
    suggested_progression:
      - "v0.x: Genesis (beginning)"
      - "v1.0: Phoenix (rebirth/launch)"
      - "v2.0: Aurora (dawn/light)"
      - "v3.0: Titan (strength)"
      - "v4.0: Nebula (expansion)"
      - "v5.0: Olympus (peak)"
      - "v6.0: Cosmos (universe)"
      - "v7.0: Chronos (time)"
      - "v8.0: Atlas (support)"
      - "v9.0: Helios (sun)"
      - "v10.0: Zenith (pinnacle)"
  
  commands:
    version:
      command: "php isotone version"
      description: "Show version information"
    version_bump:
      command: "php isotone version:bump [type] [stage]"
      description: "Bump version number"
    changelog:
      command: "php isotone changelog"
      description: "Generate and save CHANGELOG.md"
    history:
      command: "php isotone version:history"
      description: "Show version history"

# ==========================================
# GIT & COMMIT STANDARDS (Priority 85)
# ==========================================

git_standards:
  priority: 85
  enabled: true
  context: ["development", "git", "commit"]
  description: "Git commit standards and automation"
  
  auto_commit:
    enabled: true
    description: "Git commit rules - ask first unless explicit satisfaction"
    
    explicit_satisfaction:
      description: "Auto-commit WITHOUT asking on these EXPLICIT satisfaction signals"
      triggers:
        - "perfect"
        - "thanks"
        - "good"
        - "excellent"
        - "happy with"
        - "that's perfect thanks"
        - "looks good"
      actions:
        - "Run: git add -A"
        - "Create semantic commit message"
        - "Run: git commit -m 'description'"
        - "Run: git push"
        - "Report completion"
    
    ask_permission:
      description: "Ask for permission before committing on these signals"
      triggers:
        - "let's save"
        - "commit this"
        - "save changes"
        - "push to git"
      actions:
        - "Confirm with user: 'Shall I commit these changes?'"
        - "If yes, proceed with commit"
        - "If no, skip commit"
    
    never_commit:
      description: "NEVER commit on these signals"
      triggers:
        - "wait"
        - "hold on"
        - "not ready"
        - "still working"
        - "more changes coming"
        - "don't commit"
  
  commit_message_format:
    type_prefixes:
      - "feat: New feature"
      - "fix: Bug fix"
      - "docs: Documentation"
      - "style: Code style"
      - "refactor: Code refactoring"
      - "test: Tests"
      - "chore: Maintenance"
      - "perf: Performance"
      - "ci: CI/CD"
      - "build: Build system"
    format: "[type]: [description]"
    examples:
      - "feat: Add user authentication system"
      - "fix: Resolve database connection issue"
      - "docs: Update installation guide"
    rules:
      - "Use present tense"
      - "Keep under 72 characters"
      - "Reference issue numbers when applicable"
      - "Be specific and descriptive"

# ==========================================
# DOCUMENTATION SYSTEM (Priority 85)
# ==========================================

documentation:
  priority: 85
  enabled: true
  context: ["documentation", "docs"]
  description: "Unified documentation system and maintenance"
  
  structure:
    organization:
      user_docs_folder:
        path: "/user-docs"
        purpose: "All documentation (user and developer)"
        description: "Primary documentation folder - dynamically organized"
        contents:
          - "getting-started/ - Installation and setup guides"
          - "configuration/ - Config and database documentation"
          - "development/ - Developer documentation and API reference"
          - "api-reference/ - API and theme documentation"
        note: "The /docs folder was removed - all docs are now in /user-docs"
      key_files:
        - "CLAUDE.md - Master LLM instructions"
        - "README.md - Project overview and status"
        - "NOTES.md - User notes and reminders"
        - "CHANGELOG.md - Version history"
  
  automated_workflow:
    triggers:
      git_hooks:
        pre_commit:
          when: "Every git commit"
          actions:
            - "Run composer ide:sync"
            - "Stage updated documentation files if manually edited"
        pre_push:
          when: "Every git push"
          actions:
            - "Detect version.json changes"
            - "Auto-generate CHANGELOG.md if version changed"
            - "Stage changelog if updated"
            - "Final documentation validation"
      version_bump:
        when: "Running php isotone version:bump"
        actions:
          - "Update version in config/version.json"
          - "Generate CHANGELOG.md"
          - "Update documentation manually if needed"
          - "Run composer ide:sync"
  
  maintenance_rules:
    workflow:
      - "Update README.md status when features complete"
      - "Update relevant docs in /user-docs"
      - "Document new routes/endpoints"
      - "Review documentation for accuracy"
    rules:
      - "Keep documentation in sync with code"
      - "Update file references when moved"
      - "Update code examples when APIs change"
      - "ALWAYS review documentation changes before saying task is done"
    files_requiring_updates:
      - "README.md - Feature status, installation steps"
      - "CLAUDE.md - New patterns/rules"
      - "config.sample.php - New config variables"
      - "user-docs/getting-started/installation.md - Installation steps"
      - "user-docs/development/getting-started.md - Developer guide"
  
  commands:
    docs_hooks:
      command: "composer docs:hooks"
      description: "Generates hooks documentation from code"
    ide_sync:
      command: "composer ide:sync"
      description: "Sync IDE rules to .windsurf/"

# ==========================================
# LLM DEVELOPMENT GUIDELINES (Priority 85)
# ==========================================

llm_development:
  priority: 85
  enabled: true
  context: ["*"]
  description: "Comprehensive LLM development guidelines"
  
  critical_rules:
    - "This is an LLM-driven project - read LLM guides FIRST"
    - "NO Node.js/npm - Pure PHP project"
    - "NO build steps - Direct file editing only"
    - "NO migrations - RedBeanPHP handles schema"
    - "XAMPP/shared hosting - Must work on basic hosting"
    - "PSR-12 standards - Follow PHP-FIG standards"
    - "Security first - Use .htaccess protection"
    - "Hook Naming - Use iso_ prefix for WP-equivalent hooks"
  
  required_reading:
    - "docs/LLM-DEVELOPMENT-GUIDE.md - Essential rules"
    - "docs/AI-CODING-STANDARDS.md - Coding standards"
    - "docs/PROMPT-ENGINEERING-GUIDE.md - Prompt writing"
    - "docs/LLM-CONFIG-RULES.md - Config.php rules"
  
  task_patterns:
    add_route:
      description: "Add a new page/route"
      steps:
        - "Edit app/Core/Application.php::initializeRoutes()"
        - "Add handler method in same class"
        - "Return Response object with HTML"
    create_model:
      description: "Create a data model"
      steps:
        - "Add to app/Models/"
        - "Extend \\RedBeanPHP\\SimpleModel"
        - "Name as Model_[tablename]"
    add_plugin:
      description: "Create a plugin"
      steps:
        - "Create in iso-content/plugins/[plugin-name]/"
        - "Use WordPress-style hooks with iso_ prefix"
        - "No npm/build required"
    add_theme:
      description: "Create a theme"
      steps:
        - "Create in iso-content/themes/[theme-name]/"
        - "Include style.css with theme header"
        - "Use template hierarchy system"
        - "No npm/build required"
  
  before_completing_task:
    mandatory:
      - "Review documentation changes"
      - "Update relevant documentation"
      - "Test on XAMPP environment"
      - "Verify shared hosting compatibility"
  
  never_do:
    - "Never run npm install or any npm command"
    - "Never create database migrations"
    - "Never use Laravel/Symfony full framework patterns"
    - "Never add complex build processes"
    - "Never assume root URL (use /isotone/ path)"
    - "Never commit config.php to git"
    - "Never modify vendor/ directory"
    - "Never create or reference .env files"
  
  always_do:
    - "Follow PSR-12 coding standards"
    - "Add PHPDoc comments"
    - "Escape HTML output"
    - "Use RedBeanPHP for database"
    - "Test on /isotone/ URL path"
    - "Keep shared hosting compatible"
    - "Use config.php for configuration"
    - "Update affected documentation"

# ==========================================
# HOOK SYSTEM (Priority 85)
# ==========================================

hook_system:
  priority: 85
  enabled: true
  context: ["hooks", "plugins", "themes"]
  description: "Complete hook system conventions and automation"
  
  naming_conventions:
    wp_equivalent_hooks:
      description: "Use iso_ prefix instead of wp_ for WordPress-equivalent hooks"
      examples:
        - "wp_head → iso_head"
        - "wp_footer → iso_footer"
        - "wp_enqueue_scripts → iso_enqueue_scripts"
        - "wp_ajax_{action} → iso_ajax_{action}"
        - "wp_loaded → iso_loaded"
        - "wp_init → iso_init"
    wp_functions:
      description: "Functions with wp_ prefix use iso_ instead"
      examples:
        - "wp_register_script() → iso_register_script()"
        - "wp_enqueue_style() → iso_enqueue_style()"
        - "wp_localize_script() → iso_localize_script()"
        - "wp_add_inline_style() → iso_add_inline_style()"
    standard_hooks:
      description: "Hooks without wp_ prefix remain the same"
      examples:
        - "init → init"
        - "admin_menu → admin_menu"
        - "save_post → save_post"
        - "the_content → the_content"
    manipulation_functions:
      description: "Hook manipulation functions remain the same"
      examples:
        - "add_action() → add_action()"
        - "add_filter() → add_filter()"
        - "remove_action() → remove_action()"
        - "do_action() → do_action()"
        - "apply_filters() → apply_filters()"
  
  automation:
    documentation_generation:
      command: "php isotone hooks:docs"
      description: "Generate comprehensive hook documentation"
      outputs:
        - "/storage/hooks-implementation.json - All hooks data"
        - "/storage/hook-stats.json - Hook statistics"
        - "/user-docs/development/api-reference.md - API documentation"
        - "Hook naming conventions follow WordPress standards with iso_ prefix"
    scanning:
      directories:
        - "/iso-core - Core application hooks"
        - "/iso-admin - Admin panel hooks"
        - "/iso-content/themes - Theme hooks"
        - "/iso-content/plugins - Plugin hooks"
      patterns:
        - "do_action() calls"
        - "apply_filters() calls"
        - "add_action() registrations"
        - "add_filter() registrations"
    workflow_integration:
      - "Run manually with composer docs:hooks"
      - "Part of pre-commit hooks"
      - "Updates on version bumps"
  
  implementation_guidelines:
    best_practices:
      - "Use semantic hook names"
      - "Document hook parameters"
      - "Provide usage examples"
      - "Include @since tags"
      - "Add backward compatibility"
    compatibility:
      - "Provide aliases for WordPress hooks"
      - "Support both iso_ and wp_ prefixes during transition"
      - "Document migration path"
    resources:
      - "Hook documentation is auto-generated"
      - "Use iso-admin/hooks-explorer.php for interactive documentation"
      - "Run php iso-automation/cli.php hooks:scan to generate docs"

# ==========================================
# CSS & STYLING (Priority 80)
# ==========================================

css_architecture:
  priority: 80
  enabled: true
  context: ["frontend", "styling", "ui"]
  description: "CSS architecture and styling rules"
  
  strict_separation:
    admin_pages:
      path: "/iso-admin/*"
      framework: "Tailwind CSS via CDN"
      style: "Clean, modern, utility-first"
      colors: "Gray-900 background, cyan/green accents"
      do: "Use Tailwind classes (bg-gray-900, text-cyan-400)"
      dont: "Use glassmorphism or custom CSS"
    
    frontend_auth:
      path: "login, install, public pages"
      framework: "Custom modular CSS (/iso-includes/css/)"
      style: "Glassmorphism with backdrop-filter"
      classes: "iso- prefixed (iso-container, iso-btn)"
      do: "Use existing modular CSS, search before creating"
      dont: "Use Tailwind classes or create duplicate CSS"
  
  no_inline_css_policy:
    rules:
      - "ALWAYS search /iso-includes/css/ before creating styles"
      - "CHECK modular CSS files in order: base.css, layout.css, components.css, effects.css"
      - "EVALUATE if style can be modular/reusable"
      - "USE existing iso- prefix classes"
      - "ONLY use inline for truly one-off requirements"
      - "PREFER new classes in CSS modules over inline"
  
  file_structure:
    base_css: "CSS variables, fonts, resets"
    layout_css: "Page structure, containers, grids"
    components_css: "Reusable UI components"
    effects_css: "Animations and visual effects"
    isotone_css: "Main import file - include this"
  
  critical_rules:
    - "NEVER mix Tailwind and custom CSS systems"
    - "NEVER duplicate existing CSS functionality"
    - "ALWAYS check which context you're in"
    - "ALWAYS search /iso-includes/css/ first"
    - "ALWAYS use appropriate system for context"

alpine_loading_rules:
  priority: 85
  enabled: true
  context: ["frontend", "javascript", "admin", "ui"]
  description: "Critical Alpine.js loading rules to prevent dark mode breakage"
  
  loading_requirements:
    - "Alpine.js MUST be loaded at the END of the body tag"
    - "Alpine.js MUST be loaded AFTER all JavaScript functions are defined"
    - "Alpine.js MUST use the defer attribute"
    - "NEVER load Alpine.js in the <head> section"
    - "NEVER load Alpine.js before adminApp() function is defined"
  
  correct_placement:
    location: "Just before closing </body> tag"
    example: |
      <!-- All other scripts and functions defined above -->
      <script>
        function adminApp() {
          // ... app logic ...
        }
      </script>
      
      <!-- Alpine.js - Load LAST after all functions are defined -->
      <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
      </body>
  
  dark_mode_requirements:
    - "adminApp() function MUST be defined before Alpine loads"
    - "darkMode property MUST be initialized from localStorage"
    - "Document class manipulation MUST use document.documentElement"
    - "Tailwind config MUST have darkMode: 'class' set"
  
  violations:
    - pattern: '<head>.*alpinejs.*</head>'
      severity: "critical"
      message: "Alpine.js loaded in head - will break dark mode! Move to end of body."
    - pattern: 'alpinejs.*function adminApp'
      severity: "critical"
      message: "Alpine.js loaded before adminApp() - will break functionality!"
    - pattern: 'Alpine.start().*function adminApp'
      severity: "critical"
      message: "Alpine starting before functions defined - will fail!"
  
  testing_checklist:
    - "Verify dark mode toggle works"
    - "Check browser console for Alpine errors"
    - "Ensure localStorage persistence works"
    - "Test x-data bindings are functional"
    - "Confirm Alpine devtools shows components"
  
  common_mistakes:
    - "Loading Alpine in head with defer - still executes too early"
    - "Using module scripts that change load order"
    - "Forgetting to define functions before Alpine loads"
    - "Loading Alpine multiple times"
    - "Not setting darkMode: 'class' in Tailwind config"

# ==========================================
# CONFIGURATION SYSTEM (Priority 80)
# ==========================================

configuration:
  priority: 80
  enabled: true
  context: ["setup", "configuration", "install"]
  description: "Configuration system rules"
  
  critical_rule: "NO .ENV FILES - USE config.php"
  
  setup:
    location: "/config.php in root directory"
    template: "/config.sample.php (tracked in git)"
    actual: "/config.php (ignored by git)"
    process:
      - "cp config.sample.php config.php"
      - "Edit config.php with credentials"
  
  constants:
    database:
      - "DB_HOST - Database server"
      - "DB_NAME - Database name"
      - "DB_USER - Database username"
      - "DB_PASSWORD - Database password"
    development:
      - "DEBUG_MODE - Enable debugging"
      - "DISPLAY_ERRORS - Show errors"
    application:
      - "SITE_URL - Site URL"
      - "ADMIN_EMAIL - Admin email"
      - "ENVIRONMENT - Current environment"
  
  never:
    - "Create or reference .env files"
    - "Use Dotenv package"
    - "Suggest environment variables"
  
  always:
    - "Use config.php for all configuration"
    - "Reference via PHP constants"
    - "Keep sensitive data in config.php"

# ==========================================
# PROJECT STRUCTURE (Priority 75)
# ==========================================

project_structure:
  priority: 75
  enabled: true
  context: ["*"]
  description: "Project directory structure"
  
  directories:
    app:
      description: "Core application (Service-Oriented Architecture)"
      contents:
        - "Core/ - CMS functionality"
        - "Commands/ - CLI commands"
        - "Services/ - Business logic services (NOT MVC)"
        - "NO Models/ directory - uses RedBeanPHP Active Record"
        - "NO Controllers/ - direct page routing in iso-admin"
    iso_admin:
      description: "Admin panel (Direct page routing, not MVC)"
      contents:
        - "Individual PHP pages handle own logic"
        - "api/ - AJAX/REST endpoints"
        - "includes/ - Shared components (layout, auth)"
        - "Uses Tailwind CSS + Alpine.js"
    iso_includes:
      description: "Shared resources"
      contents:
        - "assets/ - Images, logos"
        - "css/ - Modular CSS (NO INLINE!)"
        - "js/ - Global JavaScript"
        - "scripts/ - PHP includes"
    iso_content:
      description: "User content (preserve)"
      contents:
        - "plugins/ - Installed plugins"
        - "themes/ - Installed themes"
        - "uploads/ - Media uploads"
    iso_runtime:
      description: "System generated (safe to delete)"
      contents:
        - "cache/ - Page cache"
        - "logs/ - Application logs"
        - "temp/ - Temporary files"
    config:
      description: "Configuration files"
    user_docs:
      description: "All documentation (unified location)"
    storage:
      description: "Application storage"
      contents:
        - "hook-stats.json - Hook statistics"
        - "hooks-implementation.json - Hook implementation data"
        - "hooks-status.json - Hook system status"
  
  key_files:
    - "config.php - Main configuration (DO NOT COMMIT)"
    - "config.sample.php - Configuration template"
    - "NOTES.md - User's notes and reminders"
    - "index.php - Main entry point"
    - ".htaccess - Security & routing"
    - "isotone - CLI tool"
    - "composer.json - Dependencies"

# ==========================================
# FILE INCLUSION PATTERNS (Priority 75)
# ==========================================

file_inclusion_patterns:
  priority: 75
  enabled: true
  context: ["development", "php", "admin"]
  description: "File inclusion and initialization patterns for Isotone"
  
  admin_files:
    pattern: "Standard pattern for admin PHP files"
    required_includes:
      - "require_once 'auth.php' - Authentication check (relative path)"
      - "require_once dirname(__DIR__) . '/config.php' - Configuration"
      - "require_once dirname(__DIR__) . '/vendor/autoload.php' - Composer autoloader"
    
    never_use:
      - "bootstrap.php - Does not exist in Isotone"
      - "Namespaces - Isotone does not use PHP namespaces"
      - "use statements for Isotone classes - Not namespaced"
    
    database_init: |
      // Standard RedBeanPHP initialization
      if (!R::testConnection()) {
          $host = defined('DB_HOST') ? DB_HOST : 'localhost';
          $dbname = defined('DB_NAME') ? DB_NAME : 'isotone_db';
          $user = defined('DB_USER') ? DB_USER : 'root';
          $pass = defined('DB_PASSWORD') ? DB_PASSWORD : '';
          
          try {
              R::setup("mysql:host=$host;dbname=$dbname", $user, $pass);
          } catch (Exception $e) {
              die('Database connection failed: ' . $e->getMessage());
          }
      }
  
  service_classes:
    description: "Service classes in /iso-core/Services/"
    pattern: "No namespace, use require_once to include"
    example: |
      // Including a service class
      require_once dirname(__DIR__) . '/iso-core/Services/ToniService.php';
      $service = new ToniService();  // No namespace
  
  api_endpoints:
    pattern: "API files in /iso-admin/api/"
    includes:
      - "require_once dirname(__DIR__) . '/auth.php' - Authentication"
      - "Same database init pattern as admin files"
  
  violations:
    - pattern: "bootstrap.php"
      severity: "high"
      message: "Isotone does not use bootstrap.php - use standard includes pattern"
    - pattern: "namespace Isotone"
      severity: "high"  
      message: "Isotone does not use namespaces - use plain classes"

# ==========================================
# DEVELOPMENT SETUP (Priority 75)
# ==========================================

development_setup:
  priority: 75
  enabled: true
  context: ["setup", "install", "getting-started"]
  description: "Complete development setup guide"
  
  requirements:
    software:
      xampp:
        version: "8.2+ with PHP 8.3+"
        components: ["Apache", "MySQL/MariaDB", "phpMyAdmin"]
      php:
        version: "8.3+"
        extensions: ["mbstring", "pdo", "pdo_mysql", "curl", "json"]
      composer:
        version: "2.0+"
        purpose: "Dependency management"
    
  installation:
    quick_start:
      - "Install XAMPP for Windows"
      - "Clone to C:\\xampp\\htdocs\\isotone"
      - "Create database 'isotone_db' in phpMyAdmin"
      - "Copy config.sample.php to config.php"
      - "Edit config.php with database credentials"
      - "Run: composer install"
      - "Visit: http://localhost/isotone/install/"
    
    wsl_setup:
      - "XAMPP runs on Windows"
      - "Access from WSL via /mnt/c/xampp/htdocs/isotone"
      - "Database auto-detects Windows host IP"
      - "Use Windows browser for testing"
  
  ide_configuration:
    vscode:
      extensions:
        - "PHP Intelephense"
        - "MySQL by Jun Han"
        - "Tailwind CSS IntelliSense"
      database: "localhost:3306/isotone_db"
    phpstorm:
      database: "jdbc:mysql://localhost:3306/isotone_db"
      deployment: "Local or mounted folder"
  
  troubleshooting:
    common_issues:
      apache_not_starting:
        - "Check port 80 conflicts"
        - "Stop IIS or Skype"
        - "Run XAMPP as administrator"
      database_connection:
        - "Verify MySQL is running"
        - "Check credentials in config.php"
        - "Try 127.0.0.1 instead of localhost"
      permission_errors:
        - "Check iso-runtime/ permissions"
        - "Ensure Apache has write access"

# ==========================================
# PLUGIN & THEME DEVELOPMENT (Priority 75)
# ==========================================

plugin_development:
  priority: 75
  enabled: true
  context: ["plugins", "extensions"]
  description: "Plugin development guidelines"
  
  structure:
    location: "/iso-content/plugins/[plugin-name]/"
    required_files:
      - "[plugin-name].php - Main plugin file"
      - "readme.txt - Plugin documentation"
    header_format: |
      /**
       * Plugin Name: My Plugin
       * Description: Plugin description
       * Version: 1.0.0
       * Author: Author Name
       * License: GPL v2 or later
       */
  
  hooks_usage:
    actions: "Use add_action() with iso_ prefixed hooks"
    filters: "Use add_filter() for content modification"
    ajax: "Register with iso_ajax_{action} hooks"
    examples:
      - "add_action('iso_init', 'my_init_function');"
      - "add_filter('the_content', 'my_content_filter');"
  
  best_practices:
    - "Prefix all functions with plugin slug"
    - "Use proper nonce verification"
    - "Escape all output"
    - "Validate and sanitize input"
    - "Include uninstall cleanup"

theme_development:
  priority: 75
  enabled: true
  context: ["themes", "templates"]
  description: "Theme development guidelines"
  
  structure:
    location: "/iso-content/themes/[theme-name]/"
    required_files:
      - "style.css - Theme stylesheet with header"
      - "index.php - Main template file"
      - "functions.php - Theme functions"
    style_header: |
      /**
       * Theme Name: My Theme
       * Description: Theme description
       * Version: 1.0.0
       * Author: Author Name
       */
  
  template_hierarchy:
    - "single.php - Single post"
    - "page.php - Single page"
    - "archive.php - Archive pages"
    - "search.php - Search results"
    - "404.php - Not found"
    - "index.php - Fallback template"
  
  theme_api:
    functions:
      - "iso_head() - Header hooks"
      - "iso_footer() - Footer hooks"
      - "get_header() - Include header"
      - "get_footer() - Include footer"
      - "get_sidebar() - Include sidebar"
      - "the_loop() - WordPress-style loop"

# ==========================================
# DEVELOPMENT COMMANDS (Priority 70)
# ==========================================

development_commands:
  priority: 70
  enabled: true
  context: ["commands", "cli"]
  description: "Available development commands"
  
  composer_scripts:
    test: "Run all tests"
    test_unit: "Run unit tests only"
    test_integration: "Run integration tests"
    analyse: "Run static analysis with PHPStan"
    check_style: "Check code style (PSR-12)"
    fix_style: "Fix code style automatically"
    docs_hooks: "Generate hooks documentation from code"
    ide_sync: "Sync IDE rules"
    version_patch: "Bump patch version"
    version_minor: "Bump minor version"
    version_major: "Bump major version"
    pre_commit: "Run pre-commit checks"
  
  isotone_cli:
    version: "Show version information"
    version_bump: "Bump version number"
    version_set: "Set version directly"
    version_history: "Show version history"
    changelog: "Generate CHANGELOG.md"
    system: "Check system compatibility"
    db_test: "Test database connection"
    db_status: "Show database status"
    db_init: "Initialize database schema"
    hooks_docs: "Generate hooks documentation"

# ==========================================
# WORKFLOWS & AUTOMATION (Priority 65)
# ==========================================

workflows:
  priority: 65
  enabled: true
  context: ["workflow", "automation"]
  description: "Development workflows"
  
  feature_workflow:
    steps:
      - "Create feature branch"
      - "Implement feature"
      - "Update documentation"
      - "Review documentation"
      - "Test thoroughly"
      - "Create pull request"
  
  bug_fix_workflow:
    steps:
      - "Reproduce issue"
      - "Create test case"
      - "Fix the bug"
      - "Verify fix"
      - "Update changelog"
      - "Submit PR"
  
  release_workflow:
    steps:
      - "Run all tests"
      - "Update version"
      - "Generate changelog"
      - "Update documentation"
      - "Tag release"
      - "Deploy"

# ==========================================
# VALIDATION & CHECKS (Priority 60)
# ==========================================

validation:
  priority: 60
  enabled: true
  context: ["validation", "checks"]
  description: "Validation rules and checks"
  
  rules_validation:
    description: "When asked to validate rules, use the CLI command"
    command: "php isotone rules:validate"
    triggers:
      - "validate rules"
      - "check rules"
      - "validate and fix rules"
      - "fix rules"
    action: "Run the rules:validate CLI command instead of manual checking"
  
  file_references:
    description: "Validate file references in documentation"
    check: "All referenced files must exist"
  
  composer_scripts:
    description: "Ensure all composer scripts are documented"
    check: "All scripts in composer.json must be in /user-docs/development/commands.md"
  
  routes:
    description: "Validate documented routes exist"
    check: "All routes in /user-docs/development/routes.md must exist in code"
  
  code_examples:
    description: "Validate PHP code examples syntax"
    check: "All PHP examples must be syntactically correct"

# ==========================================
# NOTES & REMINDERS (Priority 50)
# ==========================================

notes_system:
  priority: 50
  enabled: true
  context: ["notes", "reminders"]
  description: "User notes and reminders system"
  
  usage:
    triggers:
      - "save a note"
      - "remember this"
      - "add to notes"
      - "make a note"
    actions:
      - "Add to NOTES.md under appropriate section"
      - "Update 'Last updated' date"
      - "Keep organized and clear"
    file_location: "/NOTES.md"
    tracked_in_git: true
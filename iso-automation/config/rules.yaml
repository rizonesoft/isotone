# Isotone Automation Rules
# Central configuration for all automation and LLM instructions
# Generated from MD documentation files

llm_instructions:
  branding:
    priority: 100
    enabled: true
    context: ["*"]
    description: "Critical branding rules"
    rules:
      - "ALWAYS write 'Isotone' not 'Isotone CMS'"
      - "The rebrand happened in v0.1.5-alpha"
      - "This applies to ALL documentation, code, and UI"
    violations:
      - pattern: "Isotone CMS"
        severity: "critical"
        message: "Use 'Isotone' not 'Isotone CMS'"

  search_before_create:
    priority: 95
    enabled: true
    context: ["development"]
    description: "Search for existing code before creating new"
    workflow:
      - "Use Grep to search for similar functionality"
      - "Use Glob to find related files"
      - "Check /iso-includes/css/ for existing styles"
      - "Review similar pages/components"
    rules:
      - "REUSE over CREATE"
      - "Never duplicate existing code"
      - "Always extend existing components"

  database_connection:
    priority: 85
    enabled: true
    context: ["database", "setup", "configuration"]
    description: "Database connection configuration and troubleshooting"
    connection_settings:
      web_context:
        host: "127.0.0.1 (converted from localhost)"
        port: 3306
        database: "isotone_db"
        username: "root"
        password: "empty"
      wsl_cli_context:
        host: "Windows host IP (auto-detected)"
        port: 3306
        database: "isotone_db"
        username: "root"
        password: "empty"
    ide_configuration:
      common_settings:
        host: "localhost or 127.0.0.1"
        port: 3306
        database: "isotone_db"
        username: "root"
        password: "empty"
      tools:
        phpstorm: "jdbc:mysql://localhost:3306/isotone_db"
        vscode: "MySQL extension by Jun Han"
        dbeaver: "MySQL connection type"
        workbench: "Default Schema: isotone_db"
        tableplus: "MySQL connection"
        heidisql: "Comes with XAMPP"
    command_line:
      windows_xampp: "C:\\xampp\\mysql\\bin\\mysql -u root isotone_db"
      wsl: "mysql -h 127.0.0.1 -u root isotone_db"
    redbean_orm:
      features:
        - "Creates tables automatically"
        - "No migrations required for development"
        - "Lowercase singular table names"
        - "Convention: isotoneuser, isotonesetting (no underscores)"
      table_structure:
        isotonesetting:
          - "setting_key: Configuration key"
          - "setting_value: Configuration value"
          - "setting_type: Data type"
          - "updated_at: Last update"
        isotoneuser:
          - "username: Login name"
          - "email: User email"
          - "password: Hashed password"
          - "role: User role"
          - "status: Account status"
          - "created_at: Creation timestamp"
          - "updated_at: Last update"
      best_practices:
        - "Development: freeze = false (auto-modify tables)"
        - "Production: freeze = true (lock schema)"
        - "Regular backups via phpMyAdmin"
        - "Use RedBean conventions for naming"
    troubleshooting:
      ide_connection:
        - "Verify XAMPP MySQL is running"
        - "Try 127.0.0.1 instead of localhost"
        - "Check Windows Firewall port 3306"
        - "Verify MySQL bind-address in my.ini"
      app_connection:
        - "Check http://localhost/isotone/"
        - "Verify isotone_db exists in phpMyAdmin"
        - "Ensure config.php exists (not config.sample.php)"
        - "Run installation wizard if needed"
      wsl_cli:
        - "Expected to auto-detect Windows IP"
        - "Use phpMyAdmin for management"
        - "Application handles WSL detection"
    quick_reference:
      web_app: "127.0.0.1:3306/isotone_db"
      wsl_cli: "Auto-detected Windows IP"
      ide_tools: "localhost:3306/isotone_db"
      phpmyadmin: "http://localhost/phpmyadmin"
    important_notes:
      - "Config is in config.php, NOT .env files"
      - "Smart detection only affects PHP application"
      - "IDEs connect directly to MySQL"
      - "External tools bypass PHP layer"
  
  database_operations:
    priority: 90
    enabled: true
    context: ["development"]
    description: "Database operation rules"
    rules:
      - "ALWAYS use RedBeanPHP for database operations"
      - "NEVER use PDO or mysqli directly"
      - "Table names: lowercase, no underscores"
      - "Column names: can use underscores"
    violations:
      - pattern: 'new PDO\('
        severity: "critical"
        message: "Use RedBeanPHP instead of PDO"
      - pattern: 'new mysqli\('
        severity: "critical"
        message: "Use RedBeanPHP instead of mysqli"

  version_management:
    priority: 85
    enabled: true
    context: ["version", "release", "bump", "ship"]
    description: "Comprehensive version management system"
    intent_mapping:
      bug_fixes:
        triggers: ["fix that bug", "fixed the", "bug fix", "patch"]
        action: "php isotone version:bump patch"
        type: "patch"
      new_features:
        triggers: ["added", "new feature", "implemented", "created"]
        action: "php isotone version:bump minor"
        type: "minor"
      breaking_changes:
        triggers: ["breaking change", "api changed", "major update", "incompatible"]
        action: "php isotone version:bump major"
        type: "major"
      beta_release:
        triggers: ["ready for beta", "beta testing", "go to beta"]
        action: "php isotone version:bump minor beta"
        type: "minor"
        stage: "beta"
      production_release:
        triggers: ["ship it", "release 1.0", "production", "go live"]
        action: "php isotone version:bump major stable"
        type: "major"
        stage: "stable"
    stage_progression:
      alpha:
        next: "beta"
        when: "Core features complete"
      beta:
        next: "rc"
        when: "Testing mostly done"
      rc:
        next: "stable"
        when: "Ready for production"
      stable:
        next: "alpha"
        when: "Starting next major version"
    codenames:
      suggested_progression:
        - "v0.x: Genesis (beginning)"
        - "v1.0: Phoenix (rebirth/launch)"
        - "v2.0: Aurora (dawn/light)"
        - "v3.0: Titan (strength)"
        - "v4.0: Nebula (expansion)"
        - "v5.0: Olympus (peak)"
        - "v6.0: Cosmos (universe)"
        - "v7.0: Chronos (time)"
        - "v8.0: Atlas (support)"
        - "v9.0: Helios (sun)"
        - "v10.0: Zenith (pinnacle)"
    mandatory_workflow:
      - step: "Determine version type (patch/minor/major)"
        command: "Analyze changes to determine type"
      - step: "Execute version bump"
        command: "php isotone version:bump [type] [stage] [codename]"
      - step: "Generate changelog (MANDATORY)"
        command: "php isotone changelog"
      - step: "Update all documentation (MANDATORY)"
        command: "composer docs:all"
      - step: "Verify everything updated"
        commands:
          - "cat config/version.json | head -5"
          - "cat CHANGELOG.md | head -30"
          - "echo '✅ Version bump complete!'"
    decision_tree: |
      User mentions version?
      ├─ Specific version? → Use version:set
      ├─ What changed?
      │  ├─ Bug fix → version:bump patch
      │  ├─ New feature → version:bump minor
      │  ├─ Breaking change → version:bump major
      │  └─ Unclear → Ask user
      ├─ Stage mentioned?
      │  ├─ beta → Add beta stage
      │  ├─ RC → Add rc stage
      │  ├─ release → stable (no stage)
      │  └─ No → Keep current stage
      └─ Major version? → Suggest new codename
    ui_updates:
      automatic: true
      description: "UI automatically pulls from config/version.json"
      locations:
        - "Landing page: Version::format()"
        - "API: /api/version endpoint"
        - "CLI: php isotone version"
        - "Badge: Version::getBadge()"
    rules:
      - "NEVER bump version without running ALL steps"
      - "NEVER skip changelog generation (step 3)"
      - "NEVER skip documentation update (step 4)"
      - "Always follow SemVer: Major.Minor.Patch"
      - "Stage progression: alpha → beta → rc → stable"
      - "Version.json is single source of truth"
      - "UI updates automatically - no code changes needed"
      - "Don't manually edit version strings in code"
      - "Don't skip version numbers"

  auto_commit:
    priority: 80
    enabled: true
    context: ["development"]
    description: "Auto-commit on satisfaction triggers"
    strong_satisfaction_triggers:
      - "perfect"
      - "that's perfect"
      - "perfect thanks"
      - "excellent"
      - "excellent work"
      - "that's exactly what I wanted"
      - "great work"
      - "great job"
      - "this looks good"
      - "looks good"
      - "ship it"
      - "ready to ship"
      - "ready to commit"
      - "commit this"
      - "let's push this"
      - "push it"
      - "happy with this"
      - "happy with that"
      - "working perfectly"
      - "fantastic implementation"
      - "well done"
      - "good job"
      - "awesome"
      - "amazing"
      - "love it"
      - "i love this"
    completion_signals:
      - "feature is complete"
      - "implementation finished"
      - "that completes"
      - "we're done with"
      - "is working"
      - "solves the problem"
      - "working as expected"
    moderate_satisfaction_triggers:
      - "this is better"
      - "good improvement"
      - "much better now"
      - "that's an improvement"
      - "getting closer"
    do_not_commit_on:
      - "can you fix"
      - "this doesn't work"
      - "try again"
      - "almost there"
      - "bug"
      - "error"
      - "issue"
      - "problem"
    workflow:
      - "Detect satisfaction signal in user message"
      - "Verify work is complete (not WIP)"
      - "Generate semantic commit message"
      - "Execute: git add -A"
      - "Execute: git commit -m 'type: description'"
      - "Execute: git push"
      - "Inform user of commit and push"
    commit_response_template: |
      Excellent! I've committed and pushed your changes:
      
      📝 Commit: {commit_type}: {description}
      🚀 Pushed to: origin/main
      📊 Files changed: {file_count} files, {insertions} insertions
      
      Your implementation is now live in the repository!

  configuration:
    priority: 75
    enabled: true
    context: ["setup", "configuration", "install"]
    description: "Configuration system rules and setup"
    critical_note: "⚠️ Isotone uses config.php NOT .env files - This is by design for shared hosting compatibility"
    
    llm_config_rules:
      absolute_requirements:
        - "NEVER create or reference .env files"
        - "NEVER use $_ENV or getenv() functions"
        - "NEVER suggest vlucas/phpdotenv package"
        - "ALWAYS use config.php for all configuration"
        - "ALWAYS reference PHP constants (DB_NAME, etc.)"
      
      correct_responses:
        database_setup: |
          cp config.sample.php config.php
          # Edit config.php with your database credentials
        
        reading_config: |
          // Use PHP constants
          $dbName = DB_NAME;
          $dbHost = DB_HOST;
          $debug = DEBUG_MODE;
      
      incorrect_responses:
        never_suggest:
          - "cp .env.example .env"
          - "$_ENV['DB_NAME']"
          - "getenv('DB_HOST')"
          - "composer require vlucas/phpdotenv"
      
      file_locations:
        correct:
          - "/config.php - Main configuration (git-ignored)"
          - "/config.sample.php - Template file (tracked)"
        incorrect:
          - "/.env - Does NOT exist"
          - "/.env.example - Does NOT exist"
          - "/config/.env - Does NOT exist"
      
      user_interaction_templates:
        how_to_configure: |
          To configure your database:
          1. Copy the configuration template:
             cp config.sample.php config.php
          2. Edit config.php and update:
             - DB_HOST: Your database server (usually 'localhost')
             - DB_NAME: Your database name
             - DB_USER: Your database username
             - DB_PASSWORD: Your database password
          3. Save the file and the installation wizard will connect.
        
        where_is_env: |
          Isotone doesn't use .env files. Configuration is done through 
          config.php in the root directory, similar to WordPress's wp-config.php.
        
        environment_variables: |
          Isotone uses config.php for all configuration, not environment 
          variables. This approach is more reliable on shared hosting.
          Edit the constants in config.php instead.
    setup_workflow:
      - "Copy config.sample.php to config.php"
      - "Edit database credentials"
      - "Set security keys (generate from WordPress salt generator)"
      - "Configure environment (development/staging/production)"
      - "Set file permissions (chmod 600 config.php)"
    required_settings:
      database:
        DB_HOST: "Database hostname (usually localhost)"
        DB_NAME: "Database name"
        DB_USER: "Database username"
        DB_PASSWORD: "Database password"
        DB_PORT: "Database port (default: 3306)"
        DB_CHARSET: "Character set (default: utf8mb4)"
        DB_COLLATE: "Collation (default: utf8mb4_unicode_ci)"
        DB_PREFIX: "Table prefix (default: iso_)"
      application:
        SITE_URL: "Site URL (leave empty for auto-detection)"
        ADMIN_EMAIL: "Administrator email"
        TIMEZONE: "Default timezone (e.g., UTC)"
        LANGUAGE: "Default language code (e.g., en)"
      security:
        AUTH_KEY: "Authentication key for cookies"
        SECURE_AUTH_KEY: "Secure authentication key"
        LOGGED_IN_KEY: "Key for logged-in cookies"
        NONCE_KEY: "Nonce generation key"
        AUTH_SALT: "Authentication salt"
        SECURE_AUTH_SALT: "Secure authentication salt"
        LOGGED_IN_SALT: "Logged-in cookie salt"
        NONCE_SALT: "Nonce salt"
      developer:
        DEBUG_MODE: "Enable debug mode (true/false)"
        DEBUG_QUERIES: "Log database queries (true/false)"
        DISPLAY_ERRORS: "Show PHP errors (true/false)"
        ERROR_LEVEL: "PHP error reporting level"
        MAINTENANCE_MODE: "Enable maintenance mode (true/false)"
        ENVIRONMENT: "Current environment (development/staging/production)"
      cache:
        CACHE_DRIVER: "Cache driver (file/redis/memcached)"
        CACHE_PATH: "Path for file cache storage"
        CACHE_TTL: "Default cache TTL in seconds"
      session:
        SESSION_DRIVER: "Session storage driver (file/database)"
        SESSION_LIFETIME: "Session lifetime in minutes (default: 120)"
        SESSION_PATH: "Path for file sessions"
        SESSION_SECURE: "Require HTTPS for cookies (true/false)"
      logging:
        LOG_CHANNEL: "Log channel (single/daily/syslog)"
        LOG_LEVEL: "Minimum log level (debug/info/warning/error)"
        LOG_PATH: "Path to log files"
        LOG_DAYS: "Days to keep log files (for daily channel)"
      mail:
        MAIL_DRIVER: "Mail driver (smtp/sendmail/mail)"
        MAIL_HOST: "SMTP host"
        MAIL_PORT: "SMTP port (25/587/465)"
        MAIL_USERNAME: "SMTP username"
        MAIL_PASSWORD: "SMTP password"
        MAIL_ENCRYPTION: "Encryption type (tls/ssl/none)"
        MAIL_FROM_ADDRESS: "Default from address"
        MAIL_FROM_NAME: "Default from name"
      media:
        MAX_UPLOAD_SIZE: "Maximum upload size (e.g., 10M)"
        ALLOWED_FILE_TYPES: "Comma-separated list of allowed extensions"
        UPLOAD_PATH: "Path to uploads directory"
        IMAGE_QUALITY: "JPEG quality (1-100)"
        ENABLE_IMAGE_OPTIMIZATION: "Auto-optimize images (true/false)"
      advanced_security:
        BCRYPT_ROUNDS: "Password hashing rounds (default: 10)"
        JWT_SECRET: "Secret key for JWT tokens"
        RATE_LIMIT: "API rate limit per minute (default: 60)"
        CSRF_ENABLED: "Enable CSRF protection (true/false)"
        XSS_FILTER: "Enable XSS filtering (true/false)"
    environment_configs:
      development:
        DEBUG_MODE: true
        DISPLAY_ERRORS: true
        ERROR_LEVEL: "E_ALL"
        CACHE_DRIVER: "file"
        LOG_LEVEL: "debug"
      staging:
        DEBUG_MODE: true
        DISPLAY_ERRORS: false
        ERROR_LEVEL: "E_ALL & ~E_NOTICE"
        CACHE_DRIVER: "file"
        LOG_LEVEL: "warning"
      production:
        DEBUG_MODE: false
        DISPLAY_ERRORS: false
        ERROR_LEVEL: "E_ERROR | E_WARNING | E_PARSE"
        CACHE_DRIVER: "file"
        LOG_LEVEL: "error"
        SESSION_SECURE: true
    configuration_validation:
      required_constants:
        - "DB_HOST - Must be defined"
        - "DB_NAME - Must be defined"
        - "DB_USER - Must be defined"
        - "DB_PASSWORD - Can be empty but must be defined"
      security_checks:
        - "Ensure all _KEY and _SALT constants are unique"
        - "Keys should be at least 64 characters"
        - "Never commit config.php to version control"
        - "Set file permissions to 600 or 640"
      common_issues:
        - "Missing constants cause fatal errors"
        - "Wrong database credentials show connection error"
        - "Incorrect permissions prevent reading config"
        - "Using .env file instead of config.php won't work"
    security_practices:
      - "Set config.php permissions to 600 (owner read/write only)"
      - "Never commit config.php to version control"
      - "Keep secure backup of config.php"
      - "Use unique security keys (generate from WordPress)"
      - "For WSL: use 127.0.0.1 instead of localhost"
    troubleshooting:
      database_connection:
        - "Verify credentials in config.php"
        - "Ensure database exists"
        - "Check user permissions"
        - "WSL users: use 127.0.0.1 not localhost"
      config_not_loading:
        - "Ensure config.php exists in root"
        - "Check syntax: php -l config.php"
        - "Verify file permissions"
      missing_config:
        - "Run: cp config.sample.php config.php"
        - "Or use installation wizard"
    critical_rules:
      - "NEVER create or reference .env files"
      - "NEVER suggest environment variables"
      - "ALWAYS use config.php for all settings"
      - "ALWAYS access via PHP constants (DB_NAME not $_ENV)"
      - "NEVER commit config.php to version control"
      - "NO Dotenv package usage"
    helper_functions:
      deprecated: "env() function exists but deprecated"
      preferred: "Use defined('CONSTANT') ? CONSTANT : 'default'"

  project_constraints:
    priority: 70
    enabled: true
    context: ["*"]
    description: "Core project constraints"
    rules:
      - "NO Node.js/npm - Pure PHP project"
      - "NO build steps - Direct file editing only"
      - "NO migrations - RedBeanPHP handles schema"
      - "XAMPP/shared hosting compatible"
      - "PSR-12 standards"
      - "Security first - use .htaccess"
      - "Hook naming: iso_ prefix for WP equivalents"

  css_architecture:
    priority: 65
    enabled: true
    context: ["frontend", "styling"]
    description: "CSS and styling rules"
    rules:
      admin_pages:
        - "Use Tailwind CSS via CDN"
        - "Utility-first approach"
        - "Gray-900 background, cyan/green accents"
        - "NO glassmorphism in admin"
      frontend_pages:
        - "Use custom modular CSS"
        - "Glassmorphism with backdrop-filter"
        - "iso- prefixed classes"
        - "Check /iso-includes/css/ first"
      general:
        - "NEVER mix Tailwind and custom CSS"
        - "NO inline CSS policy"
        - "Always search existing styles first"

code_standards:
  php:
    priority: 90
    enabled: true
    validation: true
    applies_to: ["*.php"]
    description: "PHP coding standards and best practices"
    file_structure:
      - "declare(strict_types=1) at top of every file"
      - "Namespace required for all classes"
      - "Group use statements alphabetically"
      - "PSR-12 coding standard"
    naming_conventions:
      classes: "PascalCase (e.g., UserController)"
      methods: "camelCase (e.g., getUserById)"
      properties: "camelCase (e.g., $userName)"
      constants: "UPPER_SNAKE (e.g., MAX_UPLOAD_SIZE)"
      files: "PascalCase.php (e.g., UserModel.php)"
      directories: "lowercase (e.g., controllers/)"
      db_tables: "snake_case with iso prefix (e.g., isotoneuser)"
      db_columns: "snake_case (e.g., created_at)"
    documentation:
      - "PHPDoc comments required for all classes and methods"
      - "Type hints required for all parameters and returns"
      - "@param, @return, @throws tags must be complete"
      - "Meaningful descriptions for classes and methods"
    class_organization:
      order:
        - "Constants first"
        - "Properties second"
        - "Constructor third"
        - "Public methods"
        - "Protected methods"
        - "Private methods last"
    redbean_models:
      naming: "Model_[tablename] extends \\RedBeanPHP\\SimpleModel"
      validation: "Implement in update() method"
      computed: "Use get[Property]() methods"
    rules:
      - "Strict types declaration required"
      - "Dependency injection over direct instantiation"
      - "Early returns to avoid deep nesting"
      - "Single responsibility principle"
      - "Meaningful exception messages"
      - "No global variables"
      - "No mixing logic and presentation"
      - "No hardcoded paths or credentials"
    
  security:
    priority: 95
    enabled: true
    validation: true
    applies_to: ["*.php", "*.js"]
    description: "Security best practices and requirements"
    output_escaping:
      html: "htmlspecialchars($input, ENT_QUOTES, 'UTF-8')"
      url: "urlencode($input)"
      javascript: "json_encode($input)"
    input_validation:
      - "Type checking required (is_string, is_int, etc.)"
      - "Range validation for numeric values"
      - "Pattern matching for usernames/emails"
      - "Whitelist validation over blacklist"
    database_security:
      - "Always use RedBeanPHP parameterized queries"
      - "Never concatenate SQL strings"
      - "R::find('table', 'field = ?', [$value])"
    csrf_protection:
      - "Generate token: bin2hex(random_bytes(32))"
      - "Store in session"
      - "Verify with hash_equals()"
    rules:
      - "Escape all HTML output"
      - "Validate all user input"
      - "Never expose secrets or keys in code"
      - "Use prepared statements via RedBean"
      - "Implement CSRF protection on forms"
      - "Sanitize file uploads"
      - "Validate MIME types"
      - "Check file extensions whitelist"
  
  performance:
    priority: 70
    enabled: true
    validation: false
    applies_to: ["*.php"]
    description: "Performance optimization guidelines"
    database:
      - "Use eager loading to avoid N+1 queries"
      - "R::preload() for related data"
      - "Cache expensive queries"
      - "Add indexes for frequent lookups"
    caching:
      - "Cache computed values"
      - "Use memory cache for session data"
      - "Cache rendered templates when possible"
    optimization:
      - "Lazy load heavy resources"
      - "Minimize database round trips"
      - "Batch operations when possible"
      - "Use pagination for large datasets"
  
  anti_patterns:
    priority: 80
    enabled: true
    validation: true
    applies_to: ["*.php"]
    description: "Patterns to avoid in code"
    avoid:
      - pattern: "global \\$"
        message: "Don't use global variables"
      - pattern: "new [A-Z][a-zA-Z]+\\(\\).*new [A-Z]"
        message: "Avoid direct instantiation in classes"
      - pattern: "if.*{.*if.*{.*if.*{"
        message: "Avoid deep nesting, use early returns"
      - pattern: "class.*{[^}]{2000,}"
        message: "Class too large, violates single responsibility"
    practices_to_avoid:
      - "Global variables"
      - "God objects (classes doing too much)"
      - "Deep nesting (more than 3 levels)"
      - "Tight coupling between classes"
      - "Mixed logic and presentation"
      - "Direct class instantiation in methods"
      - "Hardcoded configuration values"

documentation:
  organization:
    priority: 85
    enabled: true
    description: "Documentation organization and folder structure"
    folders:
      docs:
        purpose: "AI assistant integration and automated tooling"
        audience: "LLMs (Claude, Copilot, Cursor), automated scripts, CI/CD"
        warning: "⚠️ DO NOT REORGANIZE - 95+ hardcoded references"
        contents:
          - "LLM-*.md - AI assistant instructions"
          - "AI-*.md - Coding standards for AI"
          - "PROMPT-*.md - Prompt engineering guides"
          - "Technical implementation details"
          - "Automated workflow documentation"
        flat_structure: "Required for IDE integrations and automated scripts"
      
      user_docs:
        purpose: "Well-organized documentation for humans"
        audience: "Developers, administrators, end users"
        structure:
          - "installation/ - Setup and deployment"
          - "configuration/ - Settings and config"
          - "development/ - Developer guides"
          - "api/ - API documentation"
          - "guides/ - User guides"
        benefits: "Can be reorganized without breaking systems"
    
    shared_files:
      description: "Files maintained in /docs/ and copied to /user-docs/"
      mappings:
        - "DEVELOPMENT-SETUP.md → user-docs/installation/development-setup.md"
        - "GETTING-STARTED.md → user-docs/development/getting-started.md"
        - "ISOTONE-TECH-STACK.md → user-docs/installation/tech-stack.md"
        - "CONFIGURATION.md → user-docs/configuration/config-guide.md"
        - "DATABASE-CONNECTION.md → user-docs/configuration/database.md"
        - "API-REFERENCE.md → user-docs/development/api-reference.md"
      workflow: "Always update /docs/ version first, then sync to /user-docs/"
    
    update_rules:
      update_docs_when:
        - "Adding LLM-specific rules"
        - "Changing AI coding standards"
        - "Updating automated workflows"
        - "Modifying development patterns"
        - "Updating any shared documentation files"
      
      update_user_docs_when:
        - "Writing user guides (unique to user-docs)"
        - "Creating tutorials (unique to user-docs)"
        - "Adding human-specific documentation"
        - "Improving organization/navigation"
      
      update_both_when:
        - "Shared files change (update /docs/ first, then sync)"
        - "Major feature additions affect both audiences"
        - "Configuration changes"
        - "Installation process updates"
    
    llm_guidance:
      priority: 80
      enabled: true
      description: "How LLMs should handle documentation"
      workflow:
        - "Check /docs/ for technical/development info"
        - "Check /user-docs/ for user-facing guides"
        - "Keep /docs/ references unchanged"
        - "Feel free to reorganize /user-docs/ as needed"
      critical: "Never reorganize /docs/ folder - it will break integrations"
  
  automated_workflow:
    priority: 90
    enabled: true
    description: "Automated documentation maintenance system"
    triggers:
      git_hooks:
        pre_commit:
          when: "Every git commit"
          actions:
            - "Run composer docs:update"
            - "Run composer ide:sync"
            - "Stage updated documentation files"
            - "Run composer docs:check"
            - "Block commit if documentation has errors"
          files_updated:
            - "All documentation in docs/"
            - "Project structure references"
            - "API documentation"
            - "Environment variable documentation"
            - "Composer command documentation"
        pre_push:
          when: "Every git push"
          actions:
            - "Detect version.json changes"
            - "Auto-generate CHANGELOG.md if version changed"
            - "Stage changelog if updated"
            - "Final documentation validation"
            - "Block push if documentation invalid"
      version_bump:
        when: "Running php isotone version:bump"
        actions:
          - "Update version in config/version.json"
          - "Generate CHANGELOG.md"
          - "Run composer docs:update"
          - "Run composer ide:sync"
          - "Show commit instructions"
      ai_satisfaction:
        when: "User expresses satisfaction"
        actions:
          - "Run git add ."
          - "Create semantic commit message"
          - "Commit with descriptive message"
          - "Push to origin/main"
          - "Report commit and push details"
    manual_commands:
      update:
        command: "composer docs:update"
        description: "Updates all documentation files"
        actions:
          - "Generate API documentation"
          - "Update project structure references"
          - "Update environment variables list"
      check:
        command: "composer docs:check"
        description: "Validates documentation integrity"
        actions:
          - "Validate file references"
          - "Check for broken links"
          - "Validate code syntax in docs"
          - "Report errors and warnings"
      sync_ide:
        command: "composer ide:sync"
        description: "Sync IDE rules"
        actions:
          - "Copy guides to .windsurf/rules/"
          - "Ensure AI assistants have current context"
      changelog:
        command: "php isotone changelog"
        description: "Generate changelog"
        actions:
          - "Generate CHANGELOG.md from version history"
          - "Format according to Keep a Changelog standard"
    always_updated:
      - "README.md: Feature status, installation"
      - "API Documentation: Endpoints, examples"
      - "Project Structure: File listings"
      - "Environment Variables: .env.example"
      - "Composer Commands: Available scripts"
      - "Version Information: Current version, changelog"
    context_specific_updates:
      api_changes: "API documentation, examples"
      cli_changes: "CLI reference, command help"
      database_changes: "Migration guides, model docs"
      config_changes: "Setup guides, .env docs"
      ui_changes: "User guides, screenshots"
    troubleshooting:
      docs_check_fails:
        - "Update file paths in documentation"
        - "Create referenced files or update references"
        - "Fix PHP/code syntax in examples"
        - "Update or remove broken links"
      hooks_not_working:
        - "Run: php scripts/install-hooks.php"
        - "Check permissions: chmod +x .git/hooks/pre-*"
      docs_not_updating:
        - "Force update: composer docs:update"
        - "Check changes: git diff docs/"
        - "Check errors: composer docs:check"
  maintenance:
    priority: 85
    enabled: true
    context: ["documentation"]
    description: "Documentation maintenance rules"
    workflow:
      - "Update README.md status when features complete"
      - "Update relevant docs in /docs"
      - "Document new routes/endpoints"
      - "Run composer docs:check before completing"
    rules:
      - "Keep documentation in sync with code"
      - "Update file references when moved"
      - "Update code examples when APIs change"

  structure:
    priority: 80
    enabled: true
    description: "Documentation structure"
    files:
      claude_md:
        path: "CLAUDE.md"
        purpose: "Master LLM instructions"
        sync_to: [".cursorrules", ".windsurf-rules.md"]
      readme:
        path: "README.md"
        purpose: "Project overview and status"
      notes:
        path: "NOTES.md"
        purpose: "User notes and reminders"
  
  maintenance_system:
    priority: 85
    enabled: true
    description: "Documentation maintenance system and workflows"
    critical_documents:
      core_files:
        - "README.md - Features, status changes, installation"
        - "CLAUDE.md - New patterns, file changes, rules"
        - "composer.json - Dependency changes, commands"
        - "config.sample.php - New configuration constants"
      development_guides:
        - "docs/GETTING-STARTED.md - New features, API changes"
        - "docs/LLM-DEVELOPMENT-GUIDE.md - New patterns, rules for AI"
        - "docs/AI-CODING-STANDARDS.md - Style changes, new standards"
      ide_rules:
        - ".windsurf-rules.md - IDE rule changes (auto-synced)"
        - ".cursorrules - IDE rule changes (auto-generated)"
        - ".github/copilot-instructions.md - IDE rule changes (auto-generated)"
    
    dddd_process:
      description: "Document-Driven Development & Deployment"
      pre_code:
        - "Update relevant .md files with planned changes"
        - "Add '🚧 Under Development' badge to features"
        - "Document expected behavior"
        - "Create/update examples"
      during_development:
        - "Update inline PHPDoc comments"
        - "Keep CLAUDE.md current with new files/patterns"
        - "Update config.sample.php with new constants"
        - "Add to CHANGELOG.md (unreleased section)"
      post_code:
        - "Remove '🚧' badges, add '✅'"
        - "Update all examples to match implementation"
        - "Verify all referenced files exist"
        - "Check all code snippets actually work"
    
    update_checklist:
      new_file_added:
        - "Update CLAUDE.md file list"
        - "Update project structure in README.md"
        - "Update GETTING-STARTED.md if user-facing"
        - "Add to LLM-DEVELOPMENT-GUIDE.md if it's a pattern"
      new_route_added:
        - "Document in GETTING-STARTED.md"
        - "Update API documentation"
        - "Add example to CLAUDE.md"
      new_config_added:
        - "Add to config.sample.php with comment"
        - "Document in CONFIGURATION guide"
        - "Update installation instructions"
      new_dependency_added:
        - "Update installation requirements"
        - "Document why it was added"
        - "Update minimum PHP version if needed"
      new_database_table:
        - "Update tech-stack.md schema section"
        - "Document in model docs"
        - "Update LLM guide with RedBean pattern"
      api_change:
        - "Update all code examples"
        - "Mark old docs as deprecated"
        - "Provide migration guide"
    
    ide_synchronization:
      source_of_truth: ".windsurf-rules.md"
      sync_command: "composer ide:sync"
      check_command: "composer docs:check"
      supported_ides:
        - "Windsurf: .windsurf/rules/development-guide.md"
        - "Cursor: .cursorrules (auto-generated)"
        - "GitHub Copilot: .github/copilot-instructions.md"
        - "VS Code: .vscode/settings.json (manual)"
    
    golden_rules:
      - "No Code Without Docs - Document interface before implementing"
      - "No PR Without Doc Updates - Every PR must update relevant docs"
      - "No Release Without Doc Review - Full documentation audit before release"
      - "No Breaking Changes Without Migration Guide - Always provide upgrade path"
    
    llm_prompt_addition: |
      After implementing this feature:
      1. Update README.md if feature is user-visible
      2. Update CLAUDE.md with new patterns/files
      3. Update GETTING-STARTED.md with examples
      4. Update config.sample.php with new configuration
      5. Run: composer docs:check
    
    weekly_tasks:
      monday_review:
        - "Run composer docs:check"
        - "Review all TODO/FIXME markers"
        - "Update README.md feature status"
        - "Check for stale documentation (>30 days)"
        - "Verify all examples still work"
        - "Update CHANGELOG.md"
      release_checklist:
        - "Full documentation audit"
        - "Update version numbers everywhere"
        - "Generate API documentation"
        - "Update installation guides"
        - "Create migration guide if needed"
    
    emergency_fixes:
      immediate: "Add warning badge: ⚠️ Documentation Under Review"
      within_24_hours: "Fix or remove incorrect information"
      within_48_hours: "Full audit of related documentation"
    
    success_metrics:
      - "Zero errors from docs:check"
      - "All examples run without errors"
      - "No docs older than 60 days without review"
      - "Every public API is documented"
      - "Every configuration constant is documented"
      - "No TODO/FIXME in released versions"

git_standards:
  commit_messages:
    priority: 60
    enabled: true
    description: "Git commit message standards"
    format: |
      type: Subject line (max 50 chars)
      
      Longer description if needed (wrap at 72 chars)
      
      - Bullet points for details
      - Keep it clear and concise
      
      Fixes #123
    types:
      feat: "New feature"
      fix: "Bug fix"
      docs: "Documentation"
      style: "Code style (no logic change)"
      refactor: "Code restructuring"
      test: "Tests"
      chore: "Maintenance"
      perf: "Performance improvement"
    rules:
      - "Subject line max 50 characters"
      - "Imperative mood (Add not Added)"
      - "No period at end of subject"
      - "Body wrapped at 72 characters"
      - "Explain what and why, not how"
      - "Reference issues when applicable"

satisfaction_detection:
  context_aware_updates:
    priority: 75
    enabled: true
    description: "Context-aware documentation updates on satisfaction"
    patterns:
      api_changes:
        keywords: ["api", "endpoint", "route", "request", "response"]
        update_docs: ["API-REFERENCE.md", "ROUTES.md", "examples"]
      ui_changes:
        keywords: ["ui", "interface", "design", "layout", "component"]
        update_docs: ["user guides", "screenshots", "component docs"]
      cli_changes:
        keywords: ["command", "cli", "terminal", "console"]
        update_docs: ["COMMANDS.md", "CLI reference", "help text"]
      setup_changes:
        keywords: ["install", "setup", "configuration", "environment"]
        update_docs: ["DEVELOPMENT-SETUP.md", "config.sample.php", "installation guides"]
      database_changes:
        keywords: ["database", "model", "migration", "schema"]
        update_docs: ["DATABASE-CONNECTION.md", "model docs", "migration guides"]
    decision_flowchart: |
      User Message Received
              ↓
      Contains satisfaction trigger?
              ↓ YES
      Is it about completed work (not a question)?
              ↓ YES
      Any blocking keywords present?
              ↓ NO
      IMMEDIATELY: git add -A && git commit && git push
              ↓
      Inform user: "Changes committed and pushed!"
    modes:
      conservative:
        description: "Only update on explicit satisfaction signals"
        threshold: "strong_satisfaction_triggers"
        confirmation_required: true
      aggressive:
        description: "Update on moderate satisfaction"
        threshold: "moderate_satisfaction_triggers"
        confirmation_required: false
      auto:
        description: "Automatically update on any satisfaction signal"
        threshold: "any_positive_signal"
        confirmation_required: false
    lessons_learned:
      - case: "That's perfect thanks"
        lesson: "Always scan for satisfaction keywords BEFORE responding"
        action: "Immediately commit and push on this phrase"
      - case: "Missing thanks + positive word"
        lesson: "Strong satisfaction signal - don't miss it"
        action: "Treat as immediate commit trigger"
      - case: "Waiting for explicit commit command"
        lesson: "Don't wait when satisfaction is clear"
        action: "Auto-commit on clear satisfaction"

version_examples:
  ai_responses:
    priority: 50
    enabled: true
    description: "Example AI responses for version management"
    examples:
      beta_ready:
        user_says: "We're ready for beta"
        ai_response: |
          I'll update the version to beta stage:
          
          php isotone version:bump minor beta
          php isotone changelog
          composer docs:all
          
          This updates from 0.1.0-alpha to 0.2.0-beta.
      ship_v1:
        user_says: "Ship version 1.0!"
        ai_response: |
          Excellent! Let's release version 1.0:
          
          php isotone version:bump major stable "Phoenix"
          php isotone changelog
          composer docs:all
          
          This creates version 1.0.0 with codename "Phoenix".
          The landing page and API will automatically show the new version.
      bug_fix:
        user_says: "Fixed the login bug"
        ai_response: |
          I'll bump the patch version for this bug fix:
          
          php isotone version:bump patch
          php isotone changelog
          composer docs:all
          
          This updates to 0.1.1-alpha.
      new_feature:
        user_says: "We added user authentication"
        ai_response: |
          I'll bump the minor version for this new feature:
          
          php isotone version:bump minor
          php isotone changelog
          composer docs:all
          
          This updates the minor version for the new authentication feature.

development_commands:
  composer_scripts:
    priority: 60
    enabled: true
    description: "Available composer commands for development"
    testing:
      test:
        command: "composer test"
        description: "Run all tests"
      test_unit:
        command: "composer test:unit"
        description: "Run unit tests only"
      test_integration:
        command: "composer test:integration"
        description: "Run integration tests"
    code_quality:
      analyse:
        command: "composer analyse"
        description: "Run static analysis with PHPStan"
      check_style:
        command: "composer check-style"
        description: "Check code style (PSR-12)"
      fix_style:
        command: "composer fix-style"
        description: "Fix code style automatically"
    documentation:
      docs_check:
        command: "composer docs:check"
        description: "Check documentation integrity"
      docs_update:
        command: "composer docs:update"
        description: "Auto-update documentation"
      docs_sync:
        command: "composer docs:sync"
        description: "Sync user documentation"
      docs_hooks:
        command: "composer docs:hooks"
        description: "Generate hooks documentation"
      docs_all:
        command: "composer docs:all"
        description: "Complete documentation update"
      ide_sync:
        command: "composer ide:sync"
        description: "Sync IDE rules to .windsurf/"
    version_management:
      version_patch:
        command: "composer version:patch"
        description: "Bump patch version"
      version_minor:
        command: "composer version:minor"
        description: "Bump minor version"
      version_major:
        command: "composer version:major"
        description: "Bump major version"
    git_hooks:
      pre_commit:
        command: "composer pre-commit"
        description: "Run pre-commit checks"
      hooks_docs:
        command: "composer hooks:docs"
        description: "Generate hooks documentation"
    usage_notes:
      - "All composer commands can be run from project root"
      - "Test commands require PHPUnit installed"
      - "Style commands use PHP_CodeSniffer"
      - "Documentation commands are custom scripts"
      - "Version commands wrap the Isotone CLI"
  
  isotone_cli:
    priority: 60
    enabled: true
    description: "Isotone CLI commands"
    version_commands:
      version:
        command: "php isotone version"
        description: "Show version information"
      version_check:
        command: "php isotone version:check"
        description: "Check system compatibility"
      version_history:
        command: "php isotone version:history"
        description: "Show version history"
      version_bump:
        command: "php isotone version:bump [patch|minor|major] [stage]"
        description: "Bump version number"
      version_set:
        command: "php isotone version:set <version>"
        description: "Set version directly"
      changelog:
        command: "php isotone changelog"
        description: "Generate and save CHANGELOG.md"
    database_commands:
      db_test:
        command: "php isotone db:test"
        description: "Test database connection"
      db_status:
        command: "php isotone db:status"
        description: "Show database status"
      db_init:
        command: "php isotone db:init"
        description: "Initialize database schema"
      migrate:
        command: "php isotone migrate"
        description: "Run database migrations"
      migrate_status:
        command: "php isotone migrate:status"
        description: "Check migration status"
    hook_commands:
      hooks:
        command: "php isotone hooks"
        description: "Generate hooks documentation"
    usage_examples:
      - "php isotone version - Display current version"
      - "php isotone version:bump minor beta - Bump to next minor beta"
      - "php isotone changelog - Generate changelog from version history"
      - "php isotone db:test - Verify database connectivity"

development_setup:
  prerequisites:
    priority: 80
    enabled: true
    description: "Required software for development"
    required:
      php: "8.3+ minimum version"
      mysql: "5.7+ or MariaDB 10.3+"
      apache: "2.4+ with mod_rewrite enabled"
      composer: "2.0+ dependency manager"
    recommended_stacks:
      windows:
        - "XAMPP (Recommended) - Includes Apache, MySQL/MariaDB, PHP"
        - "WAMP - Alternative to XAMPP"
        - "Laragon - Modern, lightweight alternative"
      macos:
        - "MAMP - Simple Apache, MySQL, PHP stack"
        - "Laravel Valet - Lightweight development environment"
        - "Homebrew - Install components individually"
      linux:
        - "LAMP Stack - Install via package manager"
        - "Docker - Containerized environment (coming soon)"
  
  installation:
    priority: 80
    enabled: true
    description: "Step-by-step installation process"
    xampp_setup:
      download: "https://www.apachefriends.org/"
      install_path: "C:\\xampp (default location)"
      control_panel: "Start Apache and MySQL services"
      apache_config:
        - "Enable: LoadModule rewrite_module modules/mod_rewrite.so"
        - "Set: AllowOverride All in htdocs Directory block"
        - "Save httpd.conf and restart Apache"
    
    composer_install:
      windows:
        - "Download installer from getcomposer.org"
        - "Run installer, select PHP: C:\\xampp\\php\\php.exe"
        - "Verify: composer --version"
      unix:
        - "curl -sS https://getcomposer.org/installer | php"
        - "sudo mv composer.phar /usr/local/bin/composer"
        - "chmod +x /usr/local/bin/composer"
    
    project_setup:
      clone: "git clone https://github.com/rizonesoft/isotone.git"
      navigate: "cd isotone"
      dependencies: "composer install"
      
    configuration:
      critical: "⚠️ NO .env FILES - Isotone uses config.php only!"
      setup:
        unix: "cp config.sample.php config.php"
        windows: "copy config.sample.php config.php"
      edit_config:
        DB_HOST: "localhost"
        DB_NAME: "isotone_db"
        DB_USER: "root"
        DB_PASSWORD: "'' (empty for XAMPP)"
        SITE_URL: "http://localhost/isotone"
        DEBUG_MODE: "true"
        DISPLAY_ERRORS: "true"
    
    database:
      phpmyadmin: "http://localhost/phpmyadmin"
      create: "Database name: isotone_db"
      collation: "utf8mb4_unicode_ci"
    
    wizard:
      url: "http://localhost/isotone/install/"
      steps:
        - "Wizard checks database connection"
        - "Set Super Admin credentials (min 3 chars username)"
        - "Complete installation"
        - "⚠️ DELETE or rename /install directory for security"
    
    verification:
      url: "http://localhost/isotone/"
      expected:
        - "✅ Welcome page with Isotone logo"
        - "✅ PHP version check passed"
        - "✅ Composer dependencies installed"
        - "✅ Database connection active"
        - "✅ Environment configured"
  
  troubleshooting:
    priority: 75
    enabled: true
    description: "Common issues and solutions"
    error_404:
      - "Check mod_rewrite is enabled in Apache"
      - "Verify .htaccess exists in root directory"
      - "Ensure AllowOverride All in Apache config"
      - "Try direct access: http://localhost/isotone/index.php"
    
    composer_not_found:
      windows: "Add to PATH or use: C:\\ProgramData\\ComposerSetup\\bin\\composer"
      alternative: "Download composer.phar, use: php composer.phar install"
    
    permissions_unix:
      - "chmod -R 755 isotone"
      - "chmod -R 777 iso-runtime/"
      - "chmod -R 777 iso-content/uploads/"
      - "chmod -R 777 iso-content/cache/"
    
    database_failed:
      - "Verify MySQL/MariaDB service is running"
      - "Check credentials in config.php (NOT .env)"
      - "Ensure database isotone_db exists"
      - "Test: mysql -u root -p -e 'SHOW DATABASES;'"
      - "Try test script: http://localhost/isotone/install/test-db.php"
  
  development_tools:
    priority: 70
    enabled: true
    description: "IDE and development tool configuration"
    vscode_extensions:
      - "PHP Intelephense - Advanced PHP intelligence"
      - "PHP Debug - Xdebug integration"
      - "GitLens - Enhanced Git capabilities"
      - "Prettier - Code formatting"
    
    phpstorm:
      - "Set PHP interpreter to XAMPP's PHP"
      - "Configure Composer executable path"
      - "Enable WordPress code style (similar to Isotone)"
      - "Set up database connection for SQL support"
    
    testing:
      all_tests: "composer test"
      with_coverage: "composer test -- --coverage-html coverage"
      specific: "./vendor/bin/phpunit tests/Unit/ApplicationTest.php"
    
    code_quality:
      check_style: "composer check-style"
      fix_style: "composer fix-style"
      analyse: "composer analyse"

hook_naming_conventions:
  core_principle:
    priority: 90
    enabled: true
    description: "Isotone hook system naming conventions"
    principle: "Isotone establishes its unique identity while maintaining WordPress familiarity"
    
    wordpress_equivalent_hooks:
      description: "Use iso_ prefix instead of wp_ for WordPress-equivalent hooks"
      examples:
        - "wp_head → iso_head"
        - "wp_footer → iso_footer"
        - "wp_body_open → iso_body_open"
        - "wp_loaded → iso_loaded"
        - "wp_enqueue_scripts → iso_enqueue_scripts"
        - "wp_ajax_{action} → iso_ajax_{action}"
        - "wp_ajax_nopriv_{action} → iso_ajax_nopriv_{action}"
        - "wp_login → iso_login"
        - "wp_logout → iso_logout"
        - "wp_die → iso_die"
        - "wp_mail → iso_mail"
        - "wp_redirect → iso_redirect"
        - "wp_handle_upload → iso_handle_upload"
        - "wp_insert_post → iso_insert_post"
        - "wp_update_post → iso_update_post"
        - "wp_delete_post → iso_delete_post"
        - "wp_insert_user → iso_insert_user"
        - "wp_update_user → iso_update_user"
        - "wp_delete_user → iso_delete_user"
    
    generic_wordpress_hooks:
      description: "Hooks without wp_ prefix remain the same"
      keep_unchanged:
        - "init - System initialization"
        - "admin_init - Admin initialization"
        - "admin_menu - Admin menu setup"
        - "admin_notices - Admin notifications"
        - "the_content - Filter post content"
        - "the_title - Filter post title"
        - "save_post - Post save action"
        - "delete_post - Post deletion action"
        - "user_register - User registration"
        - "template_redirect - Template redirection"
        - "after_setup_theme - Theme setup"
        - "widgets_init - Widget initialization"
        - "rest_api_init - REST API setup"
    
    isotone_specific_hooks:
      system_hooks: "isotone_{event} (e.g., isotone_core_loaded)"
      module_hooks: "isotone_{module}_{event} (e.g., isotone_plugin_activated)"
      admin_hooks: "isotone_admin_{event} (e.g., isotone_admin_dashboard_widgets)"
      api_hooks: "isotone_api_{event} (e.g., isotone_api_request)"
  
  function_naming:
    priority: 85
    enabled: true
    description: "Function naming conventions for hooks"
    
    helper_functions:
      description: "Functions with wp_ prefix use iso_ instead"
      examples:
        - "wp_enqueue_script() → iso_enqueue_script()"
        - "wp_enqueue_style() → iso_enqueue_style()"
        - "wp_localize_script() → iso_localize_script()"
        - "wp_create_nonce() → iso_create_nonce()"
        - "wp_verify_nonce() → iso_verify_nonce()"
        - "wp_nonce_field() → iso_nonce_field()"
        - "wp_send_json() → iso_send_json()"
        - "wp_send_json_success() → iso_send_json_success()"
        - "wp_send_json_error() → iso_send_json_error()"
        - "wp_die() → iso_die()"
        - "wp_redirect() → iso_redirect()"
        - "wp_safe_redirect() → iso_safe_redirect()"
        - "wp_script_is() → iso_script_is()"
        - "wp_style_is() → iso_style_is()"
    
    generic_functions:
      description: "Hook manipulation functions remain the same"
      unchanged:
        - "add_action()"
        - "do_action()"
        - "add_filter()"
        - "apply_filters()"
        - "remove_action()"
        - "remove_filter()"
        - "has_action()"
        - "has_filter()"
        - "current_action()"
        - "current_filter()"
        - "doing_action()"
        - "doing_filter()"
        - "did_action()"
        - "did_filter()"
  
  implementation_guidelines:
    priority: 80
    enabled: true
    description: "Guidelines for implementing hooks"
    
    for_developers:
      - "Always use iso_ prefix for WordPress-equivalent functionality"
      - "Keep generic hook names for non-prefixed WordPress hooks"
      - "Document new hooks in /HOOKS.md"
      - "Maintain backward compatibility where possible"
    
    for_theme_developers:
      correct_usage: |
        // Using Isotone conventions
        add_action('iso_head', 'my_head_scripts');
        add_action('iso_footer', 'my_footer_scripts');
        add_action('iso_enqueue_scripts', 'my_theme_scripts');
        
        // Generic hooks (also correct)
        add_action('init', 'my_init_function');
        add_action('admin_menu', 'my_admin_menu');
    
    for_plugin_developers:
      ajax_handlers: |
        add_action('iso_ajax_my_action', 'handle_my_ajax');
        add_action('iso_ajax_nopriv_my_action', 'handle_public_ajax');
      
      enqueue_scripts: |
        add_action('iso_enqueue_scripts', function() {
            iso_enqueue_script('my-script', plugin_dir_url(__FILE__) . 'script.js');
        });
    
    backward_compatibility:
      description: "Provide compatibility aliases for existing WordPress code"
      example: |
        if (!function_exists('wp_head')) {
            function wp_head() {
                iso_head(); // Calls Isotone equivalent
            }
        }
  
  migration_guide:
    priority: 75
    enabled: true
    description: "Converting WordPress code to Isotone"
    
    replace_wp_hooks: |
      // WordPress
      add_action('wp_head', 'my_function');
      
      // Isotone
      add_action('iso_head', 'my_function');
    
    replace_wp_functions: |
      // WordPress
      wp_enqueue_script('my-script', $url);
      
      // Isotone
      iso_enqueue_script('my-script', $url);
    
    keep_generic_unchanged: |
      // Both WordPress and Isotone
      add_action('init', 'my_function');
      add_filter('the_content', 'my_filter');
    
    rationale:
      - "Establishes Isotone's unique identity with iso_ prefix"
      - "Maintains familiarity for WordPress developers"
      - "Avoids conflicts with WordPress naming"
      - "Supports easy migration from WordPress"
      - "Enables backward compatibility layers"
  
  enforcement:
    priority: 70
    enabled: true
    description: "Hook naming enforcement and validation"
    
    automated_checks:
      command: "php isotone hooks:validate"
      validates:
        - "Hook naming conventions"
        - "Documentation in /HOOKS.md"
        - "PHPDoc comments"
    
    code_review_requirements:
      - "Follow naming conventions"
      - "Document in /HOOKS.md"
      - "Include PHPDoc comments"
      - "Have unit tests"
    
    update_process:
      - "Discuss with core team"
      - "Update this documentation"
      - "Update all affected code"
      - "Maintain backward compatibility"

hooks_automation:
  scanning_system:
    priority: 85
    enabled: true
    description: "Automated hook documentation generation system"
    
    scan_directories:
      - "/app - Core application code"
      - "/iso-admin - Admin panel"
      - "/iso-content/themes - Installed themes"
      - "/iso-content/plugins - Installed plugins"
    
    detection_targets:
      - "do_action() calls for action hooks"
      - "apply_filters() calls for filter hooks"
      - "PHPDoc comments for documentation"
      - "Deprecated hooks with @deprecated tag"
    
    generated_files:
      hooks_md:
        path: "/HOOKS.md"
        updates:
          - "Implementation status (✅ for implemented)"
          - "Discovered Hooks section with all found hooks"
          - "Statistics (total hooks, progress percentage)"
          - "File locations where each hook is fired"
      
      api_reference:
        path: "/user-docs/development/api-reference.md"
        content:
          - "Complete API reference for developers"
          - "Categorized by hook type (Actions, Filters)"
          - "Usage examples for each hook"
          - "Helper function documentation"
          - "Isotone-specific iso_* functions"
      
      status_file:
        path: "/storage/hooks-status.json"
        stores:
          - "Scan statistics"
          - "Discovered hooks list"
          - "Implementation progress"
  
  automation_workflow:
    priority: 80
    enabled: true
    description: "Hook documentation workflow integration"
    
    manual_generation:
      command: "php scripts/generate-hooks-docs.php"
      composer: "composer docs:hooks"
      
    automatic_updates:
      triggers:
        - "composer docs:all"
        - "composer docs:update"
        - "Version bumps (composer version:patch, etc.)"
        - "Pre-commit hooks if configured"
    
    integration:
      - "Part of update-docs.php workflow"
      - "Included in documentation maintenance"
      - "Synced to user-facing docs"
  
  features:
    priority: 75
    enabled: true
    description: "Hook automation system features"
    
    smart_detection:
      - "Extracts hook names from do_action() and apply_filters()"
      - "Parses hook arguments and parameters"
      - "Finds PHPDoc descriptions"
      - "Tracks line numbers and file locations"
    
    categorization:
      patterns:
        - "iso_* - Isotone Core hooks"
        - "admin_* - Admin hooks"
        - "init* - Initialization hooks"
        - "save_* - Data saving hooks"
        - "the_* - Content display hooks"
        - "ajax_* - AJAX request hooks"
        - "rest_* - REST API hooks"
    
    status_tracking:
      - "Marks hooks as ✅ when implemented"
      - "Shows planned but unimplemented hooks"
      - "Calculates overall implementation progress"
      - "Tracks deprecated hooks"
    
    developer_output:
      - "Usage examples for each hook"
      - "File locations with line numbers"
      - "Parameter documentation"
      - "Since version tracking with @since tag"
  
  output_statistics:
    priority: 70
    enabled: true
    description: "Hook scanning output and statistics"
    
    example_output: |
      🔍 Scanning for hooks implementation...
      📝 Updated HOOKS.md
      📝 Generated user-docs/development/api-reference.md
      📊 Updated hooks status
      ✅ Hooks documentation generated successfully!
      
      📊 Statistics:
        Files scanned: 33
        Actions found: 13
        Filters found: 3
        Deprecated hooks: 0
      
      📁 Categories:
        Other: 10 hooks
        Isotone Core: 6 hooks
    
    benefits:
      - "Always up-to-date documentation"
      - "No manual maintenance required"
      - "Developer-friendly with examples"
      - "Progress tracking at a glance"
      - "Seamless workflow integration"
  
  extending:
    priority: 65
    enabled: true
    description: "Extending the hook automation system"
    
    add_scan_directories:
      - "Edit scripts/generate-hooks-docs.php"
      - "Add to $scanDirectories array"
      - "Run composer docs:hooks to regenerate"
    
    customize_categorization:
      - "Edit categorizeHooks() method"
      - "Add new prefix patterns and categories"
      - "Regenerate documentation"
    
    troubleshooting:
      no_hooks_found:
        - "Check standard do_action() and apply_filters() syntax"
        - "Verify scanning directories exist with PHP files"
      
      documentation_not_updating:
        - "Ensure write permissions on /HOOKS.md"
        - "Check for PHP errors in generator script"
      
      missing_descriptions:
        - "Add PHPDoc comments above hook calls"
        - "Use @since tag for version tracking"

tech_stack:
  core_backend:
    priority: 90
    enabled: true
    description: "Isotone technology stack and architecture"
    
    php_requirements:
      version: "8.3+ required"
      memory: "128MB minimum, 256MB recommended"
      max_execution: "30 seconds minimum"
      required_extensions:
        - "pdo_mysql - Database connectivity"
        - "gd or imagick - Image processing"
        - "mbstring - Multi-byte string support"
        - "json - JSON encoding/decoding"
        - "zip - Plugin/theme installation"
        - "curl - External API communications"
        - "openssl - Security features"
      
      psr_standards:
        - "PSR-3: Logger Interface"
        - "PSR-4: Autoloading standard"
        - "PSR-12: Extended coding style"
        - "PSR-7: HTTP message interfaces"
        - "PSR-15: HTTP handlers and middleware"
    
    composer_dependencies:
      core:
        - "gabordemooij/redbean - ORM and database abstraction"
        - "monolog/monolog - PSR-3 compliant logging"
        - "symfony/http-foundation - Request/Response handling"
        - "league/commonmark - Markdown parsing"
        - "intervention/image - Image manipulation"
      
      development:
        - "phpunit/phpunit - Unit testing"
        - "squizlabs/php_codesniffer - Code style enforcement"
        - "phpstan/phpstan - Static analysis"
  
  database_layer:
    priority: 85
    enabled: true
    description: "Database configuration and ORM"
    
    database_requirements:
      supported: "MariaDB 10.6+ / MySQL 8.0+"
      charset: "utf8mb4"
      collation: "utf8mb4_unicode_ci"
      engine: "InnoDB"
      mode: "Strict mode enabled"
    
    redbean_orm:
      implementation:
        - "Fluid mode during development"
        - "Frozen mode in production"
        - "Custom model classes for complex entities"
        - "Automatic schema generation for plugins"
      
      naming_conventions:
        - "Table names: lowercase, no underscores"
        - "Column names: can use underscores"
        - "Foreign keys: tablename_id pattern"
        - "Link tables: automatic for many-to-many"
    
    core_tables:
      - "isotoneuser - User accounts"
      - "isotonecontent - Posts and pages"
      - "isotonesetting - Configuration options"
      - "isotonemedia - Media library"
      - "isotonecategory - Categories"
      - "isotonetag - Tags"
      - "isotoneplugin - Plugin registry"
      - "isotonetheme - Theme registry"
  
  frontend_technologies:
    priority: 80
    enabled: true
    description: "Frontend stack and UI technologies"
    
    admin_interface:
      css: "Tailwind CSS 3.4+ via CDN"
      approach: "Utility-first, no build process"
      customization: "Custom Isotone component library"
    
    theme_development:
      approach: "Framework-agnostic"
      starter_themes:
        - "Bootstrap 5 theme - Familiar for developers"
        - "Tailwind theme - Modern approach"
        - "Vanilla CSS theme - No framework"
    
    javascript_stack:
      alpine_js:
        version: "3.x"
        size: "~15KB minified"
        use_cases:
          - "Admin UI interactions"
          - "Form validations"
          - "Dynamic content updates"
          - "Modal/dropdown management"
      
      htmx:
        version: "2.x"
        size: "~14KB minified"
        use_cases:
          - "Inline editing"
          - "Infinite scroll"
          - "Form submissions"
          - "Live search"
          - "Content polling"
      
      optional_libs:
        - "Sortable.js - Drag and drop"
        - "Choices.js - Enhanced selects"
        - "Flatpickr - Date/time picker"
    
    icon_system:
      library: "Lucide Icons"
      benefits:
        - "Open source, consistent design"
        - "Tree-shakeable"
        - "SVG-based rendering"
        - "1000+ icons available"
        - "PHP helper functions"
  
  architecture_patterns:
    priority: 85
    enabled: true
    description: "Core architectural patterns"
    
    plugin_architecture:
      hook_system:
        - "WordPress-compatible with iso_ prefix"
        - "Action hooks: do_action(), add_action()"
        - "Filter hooks: apply_filters(), add_filter()"
      
      plugin_structure:
        main_file: "plugin-name.php"
        directories:
          - "includes/ - PHP classes"
          - "assets/ - CSS, JS, images"
          - "templates/ - View templates"
          - "languages/ - i18n files"
    
    theme_system:
      template_hierarchy:
        - "Child theme template"
        - "Parent theme template"
        - "Plugin template override"
        - "Core default template"
      
      theme_structure:
        required_files:
          - "style.css - Theme metadata"
          - "functions.php - Theme setup"
          - "index.php - Main template"
        
        template_files:
          - "single.php - Single post"
          - "page.php - Page template"
          - "archive.php - Archive pages"
          - "partials/ - Reusable components"
    
    rest_api:
      endpoints:
        - "/api/v1/posts"
        - "/api/v1/pages"
        - "/api/v1/media"
        - "/api/v1/users"
        - "/api/v1/settings"
      
      authentication:
        - "JWT tokens for stateless auth"
        - "API keys for server-to-server"
        - "WordPress-compatible with iso_ hooks"
  
  security_features:
    priority: 90
    enabled: true
    description: "Security implementation"
    
    core_security:
      - "CSRF protection on all forms"
      - "XSS prevention via output escaping"
      - "SQL injection prevention via prepared statements"
      - "File upload validation and sanitization"
      - "Password hashing with PASSWORD_DEFAULT"
      - "Two-factor authentication support"
      - "Rate limiting for login attempts"
      - "Security headers (CSP, X-Frame-Options)"
    
    rbac_system:
      roles:
        - "Super Admin"
        - "Administrator"
        - "Editor"
        - "Author"
        - "Contributor"
        - "Subscriber"
      
      capabilities:
        - "Granular permissions"
        - "Custom capabilities for plugins"
        - "Role management interface"
  
  deployment:
    priority: 75
    enabled: true
    description: "Deployment requirements and process"
    
    minimum_requirements:
      php: "8.3+"
      database: "MySQL 5.7+ or MariaDB 10.3+"
      disk_space: "50MB for core"
      memory: "128MB PHP memory limit"
      apache: "mod_rewrite enabled"
    
    recommended_environment:
      - "PHP 8.3+ with OPcache"
      - "MariaDB 10.6+"
      - "Redis/Memcached for caching"
      - "256MB+ PHP memory"
      - "HTTP/2 support"
      - "SSL certificate"
    
    installation_process:
      - "Upload files via FTP/SFTP"
      - "Create database"
      - "Run web-based installer"
      - "Configure permalinks"
      - "Install starter content (optional)"

llm_development_guide:
  quick_context:
    priority: 95
    enabled: true
    description: "LLM-specific development guidelines"
    key_facts:
      - "PHP 8.3+ with PSR standards"
      - "RedBeanPHP ORM (no migrations needed)"
      - "WordPress-compatible hooks with iso_ prefix"
      - "Runs on XAMPP/shared hosting"
      - "No Node.js required in production"
    
    critical_files:
      - "config.php - Configuration (NOT .env)"
      - "app/Core/Application.php - Main application class"
      - "composer.json - Dependencies and commands"
      - "app/helpers.php - Helper functions"
      - "CLAUDE.md - Project instructions"
  
  version_bump_process:
    priority: 95
    enabled: true
    description: "MANDATORY version bump workflow"
    when_user_says: ["bump version", "update version"]
    required_steps:
      - "php isotone version:bump [patch|minor|major] alpha"
      - "php isotone changelog - NEVER SKIP!"
      - "composer docs:all - NEVER SKIP!"
      - "Report completion with version number"
    warning: "If you skip steps 2 or 3, the version system is broken!"
  
  task_instructions:
    priority: 90
    enabled: true
    description: "Task-specific development patterns"
    
    new_feature:
      - "Check existing patterns in app/Core/*.php"
      - "Controllers go in app/Http/Controllers/"
      - "Models extend RedBeanPHP SimpleModel"
      - "Services contain business logic"
    
    adding_routes:
      location: "app/Core/Application.php::initializeRoutes()"
      pattern: |
        $this->routes->add('route_name', new Route('/path', [
            '_controller' => [$this, 'handleMethodName']
        ]));
    
    database_work:
      - "Never create migration files"
      - "Use RedBean syntax: R::dispense(), R::store()"
      - "Models are optional in app/Models/"
      - "Table names: lowercase, no underscores"
    
    plugin_creation:
      structure: "iso-content/plugins/plugin-name/"
      hooks: "Use iso_ prefix for WP-equivalent hooks"
      examples:
        - "add_action('iso_head', 'function')"
        - "add_action('iso_footer', 'function')"
        - "add_filter('the_content', 'function')"
  
  critical_rules:
    priority: 95
    enabled: true
    description: "Absolute rules for LLM developers"
    
    never_do:
      - "NEVER use npm commands"
      - "NEVER create database migrations"
      - "NEVER modify vendor/ directory"
      - "NEVER commit config.php file"
      - "NEVER use Laravel/Symfony patterns"
      - "NEVER assume Node.js is available"
      - "NEVER create .env files"
      - "NEVER use $_ENV or getenv()"
    
    always_do:
      - "ALWAYS check existing patterns first"
      - "ALWAYS use PSR-12 code style"
      - "ALWAYS escape output to prevent XSS"
      - "ALWAYS use prepared statements"
      - "ALWAYS test on /isotone/ URL path"
      - "ALWAYS preserve backward compatibility"
      - "ALWAYS update documentation"
      - "ALWAYS use config.php for configuration"
  
  code_templates:
    priority: 85
    enabled: true
    description: "Code generation templates"
    
    controller_method: |
      /**
       * Handle [description] request
       * 
       * @param Request $request
       * @return Response
       */
      private function handleName(Request $request): Response
      {
          try {
              // Logic here
              return new Response($html);
          } catch (\Exception $e) {
              return $this->handleError($e);
          }
      }
    
    model_class: |
      <?php
      declare(strict_types=1);
      
      namespace Isotone\Models;
      use RedBeanPHP\SimpleModel;
      
      class ModelName extends SimpleModel
      {
          public function method(): string
          {
              return $this->bean->property;
          }
      }
    
    service_class: |
      <?php
      declare(strict_types=1);
      
      namespace Isotone\Services;
      
      class ServiceName
      {
          public function method(): void
          {
              // Business logic
          }
      }
  
  documentation_workflow:
    priority: 90
    enabled: true
    description: "Documentation update requirements"
    
    before_changes: "composer docs:check"
    after_changes:
      - "composer docs:update"
      - "composer docs:check"
    
    fix_requirements:
      errors: "MUST fix before completing task"
      warnings: "Should fix if related to your changes"
    
    update_matrix:
      added_route: ["docs/GETTING-STARTED.md", "API docs"]
      added_config: ["config.sample.php with comment"]
      added_file: ["CLAUDE.md file list", "project structure"]
      added_dependency: ["README.md requirements"]
      added_command: ["composer.json", "documentation"]
      changed_api: ["All examples using that API"]
      added_feature: ["README.md status section"]
  
  completion_checklist:
    priority: 85
    enabled: true
    description: "Required before completing any task"
    checks:
      - "Code follows PSR-12 standard"
      - "All methods have PHPDoc comments"
      - "No hardcoded paths (use helpers)"
      - "Output is escaped for security"
      - "Changes work with XAMPP setup"
      - "Documentation is updated"
      - "composer docs:check passes"
      - "No Node.js dependencies added"
      - "Backward compatibility maintained"
      - "config.php used (not .env)"

plugin_development:
  structure:
    priority: 90
    enabled: true
    description: "Plugin development guidelines and structure"
    
    directory_layout:
      root: "iso-content/plugins/plugin-name/"
      required_files:
        - "plugin-name.php - Main plugin file"
        - "readme.txt - Plugin documentation"
        - "uninstall.php - Cleanup on uninstall"
      
      directories:
        - "includes/ - PHP classes"
        - "admin/ - Admin functionality"
        - "public/ - Public functionality"
        - "languages/ - Internationalization"
        - "assets/ - Images and resources"
    
    main_file_header: |
      /**
       * Plugin Name: My Awesome Plugin
       * Plugin URI: https://example.com/plugins/awesome
       * Description: This plugin does awesome things
       * Version: 1.0.0
       * Author: Your Name
       * Author URI: https://example.com
       * License: GPL v2 or later
       * Text Domain: my-awesome-plugin
       * Domain Path: /languages
       */
    
    activation_hooks:
      - "register_activation_hook() - Setup on activation"
      - "register_deactivation_hook() - Cleanup on deactivation"
      - "register_uninstall_hook() - Complete removal"
  
  admin_integration:
    priority: 85
    enabled: true
    description: "Admin panel integration patterns"
    
    menu_registration:
      top_level: "add_menu_page() - Create main menu"
      submenu: "add_submenu_page() - Add submenu items"
      existing: "add_options_page() - Add to Settings menu"
    
    settings_api:
      - "register_setting() - Register option group"
      - "add_settings_section() - Create settings section"
      - "add_settings_field() - Add individual field"
      - "Always sanitize input with callbacks"
      - "Use nonces for security"
    
    meta_boxes:
      - "add_meta_box() - Register meta box"
      - "Use nonces in forms"
      - "Check capabilities before saving"
      - "Sanitize all input data"
  
  database_patterns:
    priority: 85
    enabled: true
    description: "Database operations for plugins"
    
    redbeanphp_usage:
      create_table: |
        // Isotone uses RedBeanPHP - tables created automatically
        $item = R::dispense('plugindata');
        $item->user_id = get_current_user_id();
        $item->data = 'Some data';
        R::store($item);
      
      query_data: |
        // Find records
        $items = R::find('plugindata', 'user_id = ?', [$user_id]);
        
        // Update
        $item->data = 'Updated data';
        R::store($item);
        
        // Delete
        R::trash($item);
    
    important_notes:
      - "Use RedBeanPHP instead of direct SQL"
      - "Table names: lowercase, no underscores"
      - "Prefix with plugin name for uniqueness"
      - "No manual CREATE TABLE needed"
  
  ajax_handlers:
    priority: 80
    enabled: true
    description: "AJAX implementation patterns"
    
    admin_ajax:
      hook: "iso_ajax_{action} for logged-in users"
      example: |
        add_action('iso_ajax_my_action', 'handle_my_action');
        function handle_my_action() {
            check_ajax_referer('my_nonce', 'nonce');
            if (!current_user_can('manage_options')) {
                iso_die('Unauthorized');
            }
            iso_send_json_success(['message' => 'Success']);
        }
    
    public_ajax:
      hook: "iso_ajax_nopriv_{action} for non-logged users"
      example: |
        add_action('iso_ajax_nopriv_public_action', 'handle_public');
        add_action('iso_ajax_public_action', 'handle_public');
    
    security:
      - "Always verify nonces"
      - "Check user capabilities"
      - "Sanitize all input"
      - "Use iso_send_json_* functions"
  
  shortcodes:
    priority: 75
    enabled: true
    description: "Shortcode implementation"
    
    simple_shortcode: |
      add_shortcode('my_shortcode', 'my_shortcode_handler');
      function my_shortcode_handler($atts) {
          $atts = shortcode_atts([
              'title' => 'Default Title'
          ], $atts);
          return esc_html($atts['title']);
      }
    
    enclosing_shortcode: |
      add_shortcode('my_box', 'my_box_shortcode');
      function my_box_shortcode($atts, $content = null) {
          return '<div class="box">' . do_shortcode($content) . '</div>';
      }
    
    best_practices:
      - "Always escape output"
      - "Use shortcode_atts() for defaults"
      - "Process nested shortcodes with do_shortcode()"
      - "Return content, don't echo"
  
  security_practices:
    priority: 95
    enabled: true
    description: "Security best practices for plugins"
    
    data_validation:
      input_sanitization:
        - "sanitize_text_field() for text"
        - "sanitize_email() for emails"
        - "esc_url_raw() for URLs"
        - "wp_kses_post() for HTML with allowed tags"
      
      output_escaping:
        - "esc_html() for HTML text"
        - "esc_attr() for attributes"
        - "esc_url() for URLs"
        - "esc_js() for JavaScript"
        - "esc_textarea() for textareas"
    
    nonces:
      create: "iso_nonce_field('action', 'nonce_name')"
      verify: "iso_verify_nonce($_POST['nonce_name'], 'action')"
    
    capabilities:
      - "Always check current_user_can()"
      - "Use appropriate capability levels"
      - "Never trust user input"
    
    sql_security:
      - "Use RedBeanPHP ORM instead of direct SQL"
      - "If SQL needed, use prepared statements"
      - "Never concatenate user input into queries"
  
  internationalization:
    priority: 70
    enabled: true
    description: "Making plugins translatable"
    
    text_domain:
      - "Load with load_plugin_textdomain()"
      - "Use consistent text domain throughout"
      - "Place translations in languages/ directory"
    
    translation_functions:
      - "__() - Return translated string"
      - "_e() - Echo translated string"
      - "_n() - Handle plurals"
      - "_x() - Add context"
      - "esc_html__() - Escaped translation"
    
    javascript_i18n:
      - "Use iso_localize_script() for JS translations"
      - "Access via localized object in JavaScript"
  
  submission_checklist:
    priority: 75
    enabled: true
    description: "Pre-submission requirements"
    
    required:
      - "Unique and descriptive plugin name"
      - "Valid plugin header with all fields"
      - "No PHP errors or warnings"
      - "Properly prefixed functions and classes"
      - "Escaped output everywhere"
      - "Sanitized input everywhere"
      - "Nonces for all forms"
      - "Capability checks for all actions"
      - "Internationalization ready"
      - "Uninstall routine implemented"
      - "No hardcoded paths or URLs"
      - "GPL-compatible license"
      - "Documentation included"
      - "Tested on latest Isotone version"

getting_started:
  overview:
    priority: 85
    enabled: true
    description: "Getting started guide for new developers"
    what_is_isotone:
      - "Lightweight, modern PHP CMS"
      - "Shared hosting compatible - runs anywhere PHP runs"
      - "Developer-friendly with clean code and modern patterns"
      - "Fast and efficient performance"
      - "Extensible with plugin and theme system"
    
    core_concepts:
      - "MVC Architecture - Separation of concerns"
      - "Hook System - WordPress-compatible with iso_ prefix"
      - "ORM-based - RedBeanPHP for database abstraction"
      - "PSR Standards - Modern PHP practices"
      - "Config-based - Using config.php (NOT .env files)"
    
    quick_start:
      - "Clone or download repository"
      - "Run: composer install"
      - "Copy config.sample.php to config.php"
      - "Configure database credentials in config.php"
      - "Run installation wizard at /install/"
      - "Delete or rename /install directory after setup"
      - "No default credentials - you create admin account"
  
  development_basics:
    priority: 80
    enabled: true
    description: "Basic development patterns and examples"
    
    routing:
      location: "app/Core/Application.php"
      example: |
        $this->routes->add('about', new Route('/about', [
            '_controller' => [$this, 'handleAbout']
        ]));
      
    controller_methods:
      pattern: |
        private function handleAbout(Request $request): Response
        {
            $html = '<h1>About Us</h1>';
            return new Response($html);
        }
    
    database_operations:
      setup: "DatabaseService::initialize()"
      create_record: |
        $post = R::dispense('post');
        $post->title = 'Hello World';
        $post->content = 'This is my first post';
        R::store($post);
      find_records: "R::findAll('post', 'ORDER BY created_at DESC')"
      
    working_with_settings:
      table: "isotonesetting"
      columns:
        - "setting_key - Avoid MySQL reserved words"
        - "setting_value - The actual value"
        - "setting_type - Data type (string/integer/boolean)"
      get_setting: |
        $setting = R::findOne('isotonesetting', 'setting_key = ?', ['site_title']);
        $value = $setting ? $setting->setting_value : 'Default';
      
    model_creation:
      location: "app/Models/"
      pattern: |
        namespace Isotone\Models;
        use RedBeanPHP\SimpleModel;
        
        class Post extends SimpleModel
        {
            public function getFormattedDate()
            {
                return date('F j, Y', strtotime($this->created_at));
            }
        }
  
  plugin_development:
    priority: 75
    enabled: true
    description: "Plugin development guidelines"
    structure:
      location: "iso-content/plugins/plugin-name/"
      required_files:
        - "plugin-name.php - Main plugin file"
        - "README.md - Documentation"
    
    plugin_header: |
      /**
       * Plugin Name: My Plugin
       * Description: A sample plugin
       * Version: 1.0.0
       * Author: Your Name
       */
    
    hook_usage:
      - "Use add_action() for actions"
      - "Use add_filter() for filters"
      - "Use iso_ prefix for WordPress-equivalent hooks"
      - "Example: iso_head instead of wp_head"
    
    common_hooks:
      - "init - Plugin initialization"
      - "iso_head - Add to HTML head"
      - "iso_footer - Add to HTML footer"
      - "the_content - Filter post content"
      - "admin_menu - Add admin menu items"
  
  theme_development:
    priority: 75
    enabled: true
    description: "Theme development guidelines"
    structure:
      location: "iso-content/themes/theme-name/"
      required_files:
        - "index.php - Main template"
        - "style.css - Theme information and styles"
        - "functions.php - Theme functions (optional)"
        - "templates/ - Template parts directory"
    
    theme_header: |
      /*
      Theme Name: My Theme
      Description: A custom theme
      Version: 1.0.0
      Author: Your Name
      */
    
    template_functions:
      - "site_title() - Get site title"
      - "theme_head() - Output head content"
      - "theme_content() - Output main content"
      - "theme_footer() - Output footer content"
    
    template_hierarchy:
      - "index.php - Default template"
      - "page.php - Page template"
      - "single.php - Single post template"
      - "archive.php - Archive template"
      - "404.php - Not found template"
  
  best_practices:
    priority: 70
    enabled: true
    description: "Development best practices"
    
    psr_standards:
      - "PSR-4 for autoloading"
      - "PSR-12 for code style"
      - "Use proper namespaces"
      - "Follow naming conventions"
    
    security:
      - "Always escape output with htmlspecialchars()"
      - "Use prepared statements for database queries"
      - "Validate all user input"
      - "Keep dependencies updated"
      - "Never expose sensitive data"
    
    performance:
      - "Enable caching in production"
      - "Optimize images before upload"
      - "Minify CSS/JS in production"
      - "Use CDN for static assets"
      - "Implement lazy loading"
    
    version_control:
      - "Commit config.sample.php, NOT config.php"
      - "Ignore vendor/ directory"
      - "Use semantic versioning"
      - "Write clear commit messages"
      - "Keep feature branches small"
    
    configuration:
      development:
        DEBUG_MODE: "true"
        DISPLAY_ERRORS: "true"
        CACHE_DRIVER: "file"
      production:
        DEBUG_MODE: "false"
        DISPLAY_ERRORS: "false"
        CACHE_DRIVER: "file or redis"
    
    debugging:
      enable: "Set DEBUG_MODE = true in config.php"
      tools:
        - "VarDumper::dump() for variable inspection"
        - "dd() for dump and die"
        - "Monolog for logging"
        - "Check logs in iso-runtime/logs/"

github_setup:
  repository_creation:
    priority: 70
    enabled: true
    description: "GitHub repository setup and configuration"
    prerequisites:
      - "GitHub account created"
      - "Git installed locally"
      - "Repository already initialized locally"
    
    create_repository:
      steps:
        - "Go to GitHub.com and click + → New repository"
        - "Repository name: isotone or isotone-cms"
        - "Description: A lightweight PHP CMS designed for shared hosting"
        - "Visibility: Public"
        - "DO NOT initialize with README, .gitignore, or license"
      
    add_remote:
      https: "git remote add origin https://github.com/USERNAME/isotone.git"
      ssh: "git remote add origin git@github.com:USERNAME/isotone.git"
      verify: "git remote -v"
      push: "git push -u origin main"
    
    repository_settings:
      general:
        - "Default branch: main"
        - "Enable Issues and Discussions"
        - "Allow squash merging, auto-delete branches"
      
      about_section:
        description: "A lightweight PHP CMS for shared hosting"
        topics:
          - "cms"
          - "php"
          - "content-management"
          - "shared-hosting"
          - "ai-development"
          - "redbeanphp"
          - "lightweight"
      
      github_pages:
        source: "Deploy from branch"
        branch: "main"
        folder: "/docs"
  
  initial_issues:
    priority: 65
    enabled: true
    description: "Initial GitHub issues to guide contributors"
    
    database_integration:
      title: "Complete RedBeanPHP database integration"
      tasks:
        - "Create database connection class"
        - "Implement basic CRUD operations"
        - "Add model base class"
        - "Create installation script"
      labels: ["enhancement", "help wanted"]
    
    plugin_system:
      title: "Build WordPress-like plugin/hook system"
      tasks:
        - "Create hook manager"
        - "Implement add_action()"
        - "Implement add_filter()"
        - "Document hook API"
      labels: ["enhancement", "core"]
    
    admin_authentication:
      title: "Add admin login system"
      tasks:
        - "Login form"
        - "Session management"
        - "Password hashing"
        - "Remember me option"
      labels: ["enhancement", "security"]
  
  repository_maintenance:
    priority: 60
    enabled: true
    description: "Repository maintenance and best practices"
    
    readme_badges:
      - "License: MIT badge"
      - "PHP Version requirement badge"
      - "PRs Welcome badge"
      - "Build status badge (when CI/CD added)"
    
    branch_protection:
      main_branch:
        - "Require pull request reviews"
        - "Dismiss stale reviews"
        - "Require status checks"
        - "Include administrators"
    
    release_process:
      tag_format: "v{major}.{minor}.{patch}[-stage]"
      stages: ["alpha", "beta", "rc", "stable"]
      example: "v0.1.0-alpha"
      release_notes:
        - "List features added"
        - "List bugs fixed"
        - "Breaking changes warning"
        - "Installation/upgrade instructions"
    
    repository_description: |
      Isotone - A lightweight, AI-developed PHP content management system 
      designed for shared hosting. Features WordPress-like plugins, 
      RedBeanPHP ORM, and no Node.js requirements. Perfect for developers 
      who need a simple, fast CMS that works everywhere.
  
  community_engagement:
    priority: 55
    enabled: true
    description: "Community engagement and growth strategies"
    
    after_publishing:
      share:
        - "Tweet with #OpenSource hashtag"
        - "Post on r/PHP and r/webdev"
        - "Share on Dev.to"
        - "Write launch blog post"
      
      contributor_welcome:
        - "Respond to issues quickly"
        - "Label issues as 'good first issue'"
        - "Thank contributors in PRs"
        - "Add contributors to README"
      
      maintain_momentum:
        - "Regular commits (weekly minimum)"
        - "Clear roadmap in wiki"
        - "Active discussions"
        - "Monthly progress updates"
    
    commands_summary:
      initial_setup:
        - "git remote add origin https://github.com/USERNAME/isotone.git"
        - "git push -u origin main"
      
      future_pushes: "git push"
      
      create_release:
        - "git tag -a v0.1.0 -m 'Version 0.1.0'"
        - "git push origin v0.1.0"
        - "Create release on GitHub UI"

workflows:
  add_feature:
    priority: 50
    description: "Workflow for adding new features"
    steps:
      - "Search for existing similar code"
      - "Create/modify files following patterns"
      - "Update documentation"
      - "Run tests if available"
      - "Run lint and typecheck"
      - "Update CLAUDE.md if new patterns"
      - "Run composer docs:check"

  fix_bug:
    priority: 50
    description: "Workflow for fixing bugs"
    steps:
      - "Reproduce the issue"
      - "Search for root cause"
      - "Apply fix following existing patterns"
      - "Test the fix"
      - "Update documentation if needed"
      - "Run composer docs:check"

code_review:
  checklist:
    priority: 75
    enabled: true
    description: "Code review checklist for AI-generated code"
    items:
      - "No Node.js dependencies added"
      - "No complex build process required"
      - "Follows PSR-12 standard"
      - "All output escaped for XSS prevention"
      - "Database queries use RedBean properly"
      - "Error messages are meaningful"
      - "PHPDoc comments are complete"
      - "No hardcoded paths or credentials"
      - "Works on XAMPP/shared hosting"
      - "Backward compatible with existing code"
      - "Unit tests included (when applicable)"
      - "No global variables used"
      - "Proper error handling implemented"
      - "CSRF tokens implemented on forms"
      - "Input validation complete"

validation:
  file_references:
    priority: 70
    enabled: true
    description: "Validate file references in documentation"
    patterns:
      - '`([a-zA-Z0-9/_.-]+\.(php|json|md|env|htaccess))`'
    
  composer_scripts:
    priority: 70
    enabled: true
    description: "Ensure all composer scripts are documented"
    
  routes:
    priority: 70
    enabled: true
    description: "Validate documented routes exist"
    
  code_examples:
    priority: 70
    enabled: true
    description: "Validate PHP code examples syntax"

  project_structure:
    priority: 95
    enabled: true
    description: "Isotone project structure and directory organization"
    last_generated: "2025-08-15 09:12:28"
    
    directory_structure:
      root_directories:
        app:
          purpose: "Core application code"
          subdirectories:
            Commands: "CLI commands for project management"
            Core: "Core CMS functionality including Application, Hook, ThemeAPI"
            Http: "HTTP layer (Controllers, Middleware)"
            Models: "Data models"
            Services: "Business logic services"
          files:
            helpers.php: "Global helper functions"
            hooks.php: "Hook system implementation"
            theme-functions.php: "Theme support functions"
        
        iso_admin:
          purpose: "Admin panel interface"
          files:
            auth.php: "Authentication handler"
            automation.php: "Automation dashboard"
            dashboard-new.php: "Main dashboard"
            themes.php: "Theme management"
            users.php: "User management"
          subdirectories:
            includes: "Admin includes (header, layout, icons)"
            css: "Admin-specific styles"
        
        iso_automation:
          purpose: "Automation and rule engine system"
          subdirectories:
            config: "Rules and configuration"
            src: "Source code for analyzers, generators, rules"
            cache: "Cached automation data"
        
        iso_content:
          purpose: "User-generated content (preserve during updates)"
          subdirectories:
            plugins: "Installed plugins"
            themes: "Installed themes"
            uploads: "Media uploads"
        
        iso_includes:
          purpose: "Shared resources"
          subdirectories:
            assets: "Images, logos, icons"
            css: "Modular CSS architecture"
            js: "Global JavaScript"
            scripts: "PHP includes"
        
        iso_runtime:
          purpose: "System generated files (safe to delete)"
          subdirectories:
            cache: "Page cache, compiled templates"
            logs: "Application logs"
            temp: "Temporary files"
        
        config:
          purpose: "Configuration files"
          files:
            theme.php: "Theme configuration"
            version.json: "Version tracking"
        
        docs:
          purpose: "Technical/LLM documentation"
          note: "DO NOT reorganize - used by automation"
        
        user_docs:
          purpose: "User-facing documentation"
          subdirectories:
            .vitepress: "Documentation site configuration"
            api: "API documentation"
            developers: "Developer guides"
            getting-started: "Getting started guides"
        
        scripts:
          purpose: "Build and maintenance scripts"
          files:
            check-docs.php: "Documentation validation"
            generate-hooks-docs.php: "Hook documentation generator"
            sync-ide-rules.php: "IDE rules synchronization"
            update-docs.php: "Documentation update script"
        
        storage:
          purpose: "Application storage"
          files:
            hooks-status.json: "Hook system status tracking"
    
    key_files:
      configuration:
        config.php: "Main configuration (NOT tracked in git)"
        config.sample.php: "Configuration template"
        composer.json: "PHP dependencies and autoloading"
        
      documentation:
        README.md: "Project overview"
        CLAUDE.md: "LLM instructions"
        HOOKS.md: "Hook system documentation"
        NOTES.md: "User notes and reminders"
        CHANGELOG.md: "Version history"
        
      entry_points:
        index.php: "Main application entry point"
        isotone: "CLI entry point"
        
      ide_integration:
        .windsurf-rules.md: "Windsurf IDE rules"
        .claude/settings.local.json: "Claude settings"
        .github/copilot-instructions.md: "GitHub Copilot instructions"
    
    structure_rules:
      preservation:
        - "iso-content/ directory preserved during updates"
        - "config.php never committed to git"
        - "storage/ contains persistent application data"
        
      safe_to_delete:
        - "iso-runtime/ can be deleted anytime"
        - "vendor/ regenerated via composer install"
        - "node_modules/ if accidentally created (not used)"
        
      organization:
        - "docs/ for technical documentation (don't reorganize)"
        - "user-docs/ for end-user documentation (well organized)"
        - "app/ follows PSR-4 autoloading structure"
        - "iso- prefix for all system directories"

  prompt_engineering:
    priority: 85
    enabled: true
    description: "Prompt engineering guide for effective LLM interaction"
    
    effective_structure:
      basic_template: |
        Task: [Specific action needed]
        Context: [Isotone, PHP 8.3, RedBeanPHP, XAMPP]
        Requirements:
        - [Specific requirement 1]
        - [Specific requirement 2]
        Constraints:
        - Must work on shared hosting
        - No Node.js dependencies
        - Follow PSR-12 standards
      
      example_prompt: |
        Create a user authentication system for Isotone.
        
        Requirements:
        - Login/logout functionality
        - Password hashing with bcrypt
        - Session management
        - Remember me option
        
        Use RedBeanPHP for database operations and follow the existing pattern in app/Core/Application.php for routing.
    
    task_specific_prompts:
      feature_creation: |
        Add [feature name] to Isotone.
        
        The feature should:
        - [Functionality 1]
        - [Functionality 2]
        
        Follow existing patterns in:
        - Routing: app/Core/Application.php
        - Models: app/Models/
        - Helpers: app/helpers.php
        
        Ensure it works with XAMPP and requires no Node.js.
      
      bug_fixing: |
        Fix [describe bug] in Isotone.
        
        Current behavior: [what happens now]
        Expected behavior: [what should happen]
        File location: [if known]
        
        Maintain backward compatibility and test with XAMPP.
      
      refactoring: |
        Refactor [component/file] in Isotone.
        
        Goals:
        - [Improvement 1]
        - [Improvement 2]
        
        Constraints:
        - Maintain all existing functionality
        - Keep compatible with PHP 8.3
        - No breaking changes to public APIs
    
    optimization_principles:
      be_specific:
        good: "Create a plugin that adds social media sharing buttons to posts"
        bad: "Add social features"
      
      provide_context:
        good: "Using RedBeanPHP, create a model for blog comments with validation"
        bad: "Make a comment system"
      
      set_boundaries:
        good: "Create a simple contact form using only PHP and HTML, no JavaScript"
        bad: "Make a contact form"
      
      reference_existing:
        good: "Following the pattern in app/Core/Application.php, add a new route for /api/users"
        bad: "Add an API endpoint"
    
    advanced_techniques:
      chain_of_thought: |
        First, analyze the existing authentication system in Isotone.
        Then, create a two-factor authentication addon that:
        1. Generates TOTP codes
        2. Stores backup codes
        3. Integrates with existing login
        
        Show your reasoning for each design decision.
      
      few_shot_examples: |
        Here's how we create routes in Isotone:
        $this->routes->add('home', new Route('/', ['_controller' => [$this, 'handleHome']]));
        
        Now create routes for:
        - /blog (list posts)
        - /blog/{slug} (show single post)
        - /blog/category/{category} (filter by category)
      
      structured_output: |
        Create a user management system. Structure your response as:
        
        1. DATABASE SCHEMA (using RedBean conventions)
        2. MODEL CLASSES (in app/Models/)
        3. ROUTES (to add to Application.php)
        4. CONTROLLER METHODS (with full implementation)
        5. SECURITY CONSIDERATIONS
      
      iterative_refinement: |
        Step 1: Create a basic plugin structure for SEO management
        Step 2: Add meta tag management
        Step 3: Implement XML sitemap generation
        Step 4: Add Open Graph support
        
        Complete each step before moving to the next.
    
    llm_specific_guidance:
      claude:
        strengths:
          - "Following detailed instructions"
          - "Maintaining context"
          - "Security considerations"
        example: |
          Using your knowledge of secure PHP development, create a file upload system for Isotone with:
          - File type validation
          - Size limits
          - Malware scanning hooks
          - Organized storage in iso-content/uploads/
          
          Follow Isotone's coding standards and ensure XAMPP compatibility.
      
      gpt4:
        strengths:
          - "Creative solutions"
          - "Broad knowledge"
          - "Code generation"
        example: |
          Create an innovative caching system for Isotone that:
          - Works on shared hosting (file-based)
          - Has minimal overhead
          - Supports cache tags
          - Auto-clears on content updates
          
          Be creative but keep it simple and PHP-only.
      
      other_llms: |
        You are developing Isotone, a PHP 8.3 project.
        Key facts:
        - Uses RedBeanPHP for database
        - No Node.js allowed
        - Must work on shared hosting
        - Follow PSR-12 standards
        
        Task: [Your specific task]
    
    templates:
      feature_development: |
        Feature: [Name]
        User Story: As a [role], I want [feature] so that [benefit]
        
        Technical Requirements:
        - PHP 8.3 compatible
        - Use RedBeanPHP for data
        - Follow existing patterns in app/Core/
        - Add routes to Application.php
        - Include error handling
        
        Deliverables:
        1. Model classes
        2. Controller methods
        3. Routes
        4. Basic UI (if needed)
        5. Documentation updates
      
      bug_fix: |
        Bug Report: [Title]
        Environment: Isotone on XAMPP/Windows
        
        Steps to Reproduce:
        1. [Step 1]
        2. [Step 2]
        
        Expected: [What should happen]
        Actual: [What happens]
        
        Please fix this bug and:
        - Explain the root cause
        - Implement the fix
        - Add validation to prevent recurrence
        - Test on XAMPP
      
      code_review: |
        Review this Isotone code for:
        - Security vulnerabilities
        - Performance issues
        - PSR-12 compliance
        - Shared hosting compatibility
        
        [Paste code here]
        
        Provide specific suggestions with code examples.
    
    common_pitfalls:
      avoid_vague:
        bad: "Make it better"
        good: "Optimize database queries by implementing eager loading"
      
      avoid_assumptions:
        bad: "Add the usual security"
        good: "Add CSRF protection, XSS prevention, and SQL injection prevention"
      
      avoid_conflicts:
        bad: "Make it simple but add all enterprise features"
        good: "Create a minimal viable solution that can be extended later"
    
    debugging_prompts: |
      The code you provided for [feature] has this error:
      [Error message]
      
      File: [filename]
      Line: [line number]
      
      Please:
      1. Identify the issue
      2. Provide the corrected code
      3. Explain what was wrong
      4. Ensure it works with PHP 8.3 and RedBeanPHP
    
    effectiveness_metrics:
      good_results:
        - "Working code on first try"
        - "Follows Isotone patterns"
        - "No Node.js dependencies"
        - "Proper error handling"
        - "Security considered"
        - "Documentation included"
      
      poor_results:
        - "Multiple iterations needed"
        - "Uses wrong frameworks"
        - "Includes npm/webpack"
        - "Missing error handling"
        - "Security vulnerabilities"
        - "No documentation"
    
    magic_keywords:
      - "RedBeanPHP"
      - "PSR-12"
      - "shared hosting"
      - "XAMPP compatible"
      - "no Node.js"
      - "WordPress-like hooks"
      - "PHP 8.3"
      - "iso_ prefix for hooks"
    
    context_setters:
      - "In Isotone..."
      - "Following Isotone's patterns..."
      - "Using RedBeanPHP..."
      - "For shared hosting..."
    
    quality_markers:
      - "Follow PSR-12 standards"
      - "Include error handling"
      - "Add PHPDoc comments"
      - "Ensure XAMPP compatibility"
      - "Maintain backward compatibility"

  routing:
    priority: 80
    enabled: true
    description: "Application routing system and available routes"
    
    available_routes:
      home:
        path: "/"
        handler: "handleHome"
        description: "Main landing page"
      
      api_version:
        path: "/api/version"
        handler: "handleApiVersion"
        description: "Returns current version information"
      
      api_system:
        path: "/api/system"
        handler: "handleApiSystem"
        description: "Returns system status and information"
      
      install:
        path: "/install"
        handler: "handleInstall"
        description: "Installation wizard for initial setup"
      
      admin:
        path: "/admin"
        handler: "handleAdmin"
        description: "Admin dashboard entry point"
    
    route_patterns:
      static_routes: "Direct path mapping without parameters"
      dynamic_routes: "Routes with parameters like /blog/{slug}"
      api_routes: "REST API endpoints under /api/"
      admin_routes: "Protected admin routes under /admin/"
    
    implementation_location:
      file: "app/Core/Application.php"
      method: "initializeRoutes()"
      pattern: |
        $this->routes->add('route_name', new Route('/path', [
            '_controller' => [$this, 'handlerMethod']
        ]));
    
    adding_new_routes:
      steps:
        - "Open app/Core/Application.php"
        - "Locate initializeRoutes() method"
        - "Add new route definition"
        - "Create corresponding handler method"
        - "Return Response object from handler"
      
      example: |
        // In initializeRoutes()
        $this->routes->add('blog', new Route('/blog', [
            '_controller' => [$this, 'handleBlog']
        ]));
        
        // Handler method
        public function handleBlog(Request $request): Response
        {
            $content = $this->renderView('blog/index');
            return new Response($content);
        }
    
    route_requirements:
      - "All routes must have unique names"
      - "Handlers must return Response objects"
      - "Use Request object for input data"
      - "Follow RESTful conventions for APIs"
      - "Protect admin routes with authentication"

  theme_development:
    priority: 90
    enabled: true
    description: "Complete theme development guide for Isotone"
    
    native_api:
      description: "Isotone provides native Theme API with WordPress-compatible functions"
      note: "All standard WordPress template functions work out of the box"
    
    theme_structure:
      location: "iso-content/themes/your-theme/"
      required_files:
        style.css: "Theme header and metadata (required)"
        index.php: "Main template file (required)"
      optional_files:
        functions.php: "Theme functions and hooks"
        screenshot.png: "Theme preview (1200x900)"
      directories:
        assets: "CSS, JS, and images"
        templates: "Header, footer, sidebar templates"
        partials: "Content template parts"
        includes: "Additional PHP includes"
    
    theme_header:
      file: "style.css"
      format: |
        /*
        Theme Name: My Awesome Theme
        Theme URI: https://example.com/themes/awesome
        Author: Your Name
        Author URI: https://example.com
        Description: A beautiful theme for Isotone
        Version: 1.0.0
        License: GPL v2 or later
        License URI: https://www.gnu.org/licenses/gpl-2.0.html
        Text Domain: my-awesome-theme
        Tags: responsive, dark-mode, modern, blog
        */
    
    essential_hooks:
      setup:
        hook: "after_setup_theme"
        purpose: "Theme initialization and support features"
        example: |
          add_action('after_setup_theme', function() {
              add_theme_support('post-thumbnails');
              add_theme_support('title-tag');
              add_theme_support('html5', ['search-form', 'comment-form', 'gallery']);
              register_nav_menus([
                  'primary' => __('Primary Menu', 'textdomain'),
                  'footer' => __('Footer Menu', 'textdomain')
              ]);
          });
      
      scripts:
        hook: "iso_enqueue_scripts"
        purpose: "Enqueue styles and scripts"
        example: |
          add_action('iso_enqueue_scripts', function() {
              iso_enqueue_style('theme-style', get_stylesheet_uri(), [], '1.0.0');
              iso_enqueue_script('theme-script', get_template_directory_uri() . '/assets/js/main.js', ['jquery'], '1.0.0', true);
          });
      
      head:
        hook: "iso_head"
        purpose: "Add custom head elements"
      
      footer:
        hook: "iso_footer"
        purpose: "Add footer scripts and elements"
    
    template_hierarchy:
      home: "front-page.php → home.php → index.php"
      single: "single-{post-type}-{slug}.php → single-{post-type}.php → single.php → singular.php → index.php"
      page: "page-{slug}.php → page-{id}.php → page.php → singular.php → index.php"
      category: "category-{slug}.php → category-{id}.php → category.php → archive.php → index.php"
      tag: "tag-{slug}.php → tag-{id}.php → tag.php → archive.php → index.php"
      author: "author-{nicename}.php → author-{id}.php → author.php → archive.php → index.php"
      archive: "archive-{post-type}.php → archive.php → index.php"
      search: "search.php → index.php"
      404: "404.php → index.php"
    
    template_tags:
      site_info:
        - "bloginfo('name') - Site title"
        - "bloginfo('description') - Site tagline"
        - "bloginfo('url') - Site URL"
        - "bloginfo('charset') - Charset"
      
      urls:
        - "home_url('/') - Home URL"
        - "site_url('/') - Site URL"
        - "admin_url('/') - Admin URL"
        - "get_template_directory_uri() - Theme URL"
        - "get_stylesheet_directory_uri() - Child theme URL"
      
      content:
        - "the_title() - Post/page title"
        - "the_content() - Post/page content"
        - "the_excerpt() - Post excerpt"
        - "the_permalink() - Post URL"
        - "the_time() - Post date"
        - "the_author() - Post author"
        - "the_category() - Post categories"
        - "the_tags() - Post tags"
      
      loop_functions:
        - "have_posts() - Check for posts"
        - "the_post() - Setup post data"
        - "the_ID() - Get post ID"
        - "post_class() - Generate post classes"
    
    the_loop:
      pattern: |
        if (have_posts()) :
            while (have_posts()) : the_post();
                // Display post content
                get_template_part('template-parts/content', get_post_format());
            endwhile;
            the_posts_navigation();
        else :
            get_template_part('template-parts/content', 'none');
        endif;
    
    sidebars_widgets:
      registration: |
        add_action('widgets_init', function() {
            register_sidebar([
                'name' => __('Primary Sidebar', 'textdomain'),
                'id' => 'sidebar-primary',
                'description' => __('Main sidebar', 'textdomain'),
                'before_widget' => '<section id="%1$s" class="widget %2$s">',
                'after_widget' => '</section>',
                'before_title' => '<h3 class="widget-title">',
                'after_title' => '</h3>',
            ]);
        });
      
      display: |
        if (is_active_sidebar('sidebar-primary')) :
            dynamic_sidebar('sidebar-primary');
        endif;
    
    ajax_implementation:
      javascript: |
        jQuery.ajax({
            url: theme_ajax.ajax_url,
            type: 'POST',
            data: {
                action: 'load_more_posts',
                nonce: theme_ajax.nonce,
                page: 1
            },
            success: function(response) {
                // Handle response
            }
        });
      
      php_handler: |
        add_action('iso_ajax_load_more_posts', 'handle_load_more');
        add_action('iso_ajax_nopriv_load_more_posts', 'handle_load_more');
        
        function handle_load_more() {
            check_ajax_referer('theme_nonce', 'nonce');
            // Process request
            wp_send_json_success(['html' => $html]);
        }
    
    security_practices:
      escaping:
        - "esc_html() - Escape HTML"
        - "esc_attr() - Escape attributes"
        - "esc_url() - Escape URLs"
        - "esc_js() - Escape JavaScript"
      
      sanitization:
        - "sanitize_text_field() - Clean text input"
        - "sanitize_email() - Clean email input"
        - "sanitize_file_name() - Clean filenames"
      
      nonces:
        - "iso_nonce_field() - Create nonce field"
        - "check_admin_referer() - Verify nonce"
      
      capabilities:
        - "current_user_can() - Check user permissions"
    
    performance_optimization:
      - "Use iso_enqueue_script() for proper script loading"
      - "Implement transients for expensive operations"
      - "Optimize database queries with prepare statements"
      - "Lazy load images and resources"
      - "Minimize HTTP requests"
    
    internationalization:
      text_domain: |
        add_action('after_setup_theme', function() {
            load_theme_textdomain('textdomain', get_template_directory() . '/languages');
        });
      
      translation_functions:
        - "__() - Return translation"
        - "_e() - Echo translation"
        - "_n() - Plural translations"
        - "_x() - Contextual translation"
        - "esc_html__() - Escaped translation"
    
    submission_checklist:
      required:
        - "style.css with complete header"
        - "index.php main template"
        - "GPL-compatible license"
      
      quality:
        - "No PHP errors or warnings"
        - "Properly escaped output"
        - "Sanitized input"
        - "Responsive design"
        - "Accessibility standards"
      
      best_practices:
        - "No hardcoded URLs"
        - "Internationalization ready"
        - "Screenshot included (1200x900)"
        - "Clean uninstall process"

  version_management_guide:
    priority: 95
    enabled: true
    description: "Complete version management system for Isotone"
    
    versioning_scheme:
      format: "MAJOR.MINOR.PATCH[-STAGE]"
      components:
        major: "Incompatible API changes"
        minor: "Backwards-compatible functionality additions"
        patch: "Backwards-compatible bug fixes"
        stage: "Optional pre-release identifier (alpha, beta, rc)"
    
    version_config:
      location: "config/version.json"
      structure: |
        {
            "current": "0.1.0-alpha",
            "schema": "1.0.0",
            "codename": "Genesis",
            "release_date": "2025-01-13",
            "history": [...]
        }
    
    cli_commands:
      bump_version:
        patch: "php isotone version:bump patch"
        minor: "php isotone version:bump minor"
        major: "php isotone version:bump major"
        with_stage: "php isotone version:bump minor beta"
        with_codename: "php isotone version:bump major stable 'Phoenix'"
      
      set_version:
        basic: "php isotone version:set 1.0.0-rc1"
        with_codename: "php isotone version:set 1.0.0 'Phoenix'"
      
      other_commands:
        generate_changelog: "php isotone changelog"
        check_version: "php isotone version"
        check_compatibility: "php isotone version:check"
    
    development_stages:
      alpha: "Early development, major changes expected"
      beta: "Feature complete, testing phase"
      rc: "Release Candidate - Final testing before stable"
      stable: "Production ready (no stage suffix)"
    
    codename_theme:
      description: "Mythological/Celestial naming convention"
      examples:
        - "0.1.0 - Genesis"
        - "1.0.0 - Phoenix"
        - "2.0.0 - Aurora"
        - "3.0.0 - Titan"
    
    version_history:
      format: |
        {
            "version": "0.1.0-alpha",
            "date": "2025-01-13",
            "codename": "Genesis",
            "features": ["List of new features"],
            "breaking_changes": ["List of breaking changes"],
            "fixed": ["List of bug fixes"],
            "security": ["Security updates"]
        }
    
    api_endpoints:
      current_version: "GET /api/version"
      system_info: "GET /api/system"
      response_example: |
        {
            "version": "0.1.0-alpha",
            "schema": "1.0.0",
            "codename": "Genesis",
            "stage": "alpha",
            "release_date": "2025-01-13",
            "php_version": "8.3.6",
            "php_required": "8.3.0"
        }
    
    php_usage:
      examples: |
        use Isotone\Core\Version;
        
        // Get current version
        $version = Version::current();
        
        // Format for display
        echo Version::format();  // v0.1.0-alpha (Genesis)
        
        // Check version requirements
        if (Version::meets('1.0.0')) {
            // Feature available in 1.0.0+
        }
        
        // Get next version number
        $next = Version::getNextVersion('minor');
        
        // Bump version programmatically
        $newVersion = Version::bump('patch', 'beta', 'Nebula');
    
    bump_guidelines:
      patch: "Bug fixes, security updates, minor improvements"
      minor: "New features, non-breaking changes"
      major: "Breaking changes, major rewrites, API changes"
    
    prerelease_workflow:
      - "Development phase: x.y.z-alpha"
      - "Testing phase: x.y.z-beta"
      - "Release candidate: x.y.z-rc1, x.y.z-rc2"
      - "Stable release: x.y.z"
    
    commit_workflow:
      steps:
        - "Make your changes and commit"
        - "php isotone version:bump minor"
        - "git add config/version.json"
        - "git commit -m 'chore: Bump version to $(php isotone version --short)'"
        - "git tag v$(php isotone version --short)"
        - "git push origin main --tags"
    
    schema_versioning:
      purpose: "Track database structure changes"
      behavior: "Increment when database structure changes"
      usage: "Used by migration system to determine required updates"
      note: "Independent from application version"
    
    version_display_locations:
      - "Landing page: Badge next to title"
      - "CLI: php isotone version"
      - "API: /api/version endpoint"
      - "Admin panel footer (when implemented)"
    
    troubleshooting:
      version_not_updating:
        - "Check file permissions on config/version.json"
        - "Ensure the file is writable"
        - "Clear any caches"
      
      version_mismatch:
        - "Check config/version.json is single source of truth"
        - "Clear opcache if enabled: opcache_reset()"
        - "Restart web server"
    
    planned_enhancements:
      - "Automatic update checking against GitHub releases"
      - "Version-specific migration files"
      - "Plugin compatibility versioning"
      - "Automated release notes generation"
      - "Version rollback capability"
      - "Update notifications in admin panel"